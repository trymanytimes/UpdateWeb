// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package ate_cluster

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OperResult struct {
	RetCode              int32    `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	RetMsg               string   `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperResult) Reset()         { *m = OperResult{} }
func (m *OperResult) String() string { return proto.CompactTextString(m) }
func (*OperResult) ProtoMessage()    {}
func (*OperResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{0}
}

func (m *OperResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperResult.Unmarshal(m, b)
}
func (m *OperResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperResult.Marshal(b, m, deterministic)
}
func (m *OperResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperResult.Merge(m, src)
}
func (m *OperResult) XXX_Size() int {
	return xxx_messageInfo_OperResult.Size(m)
}
func (m *OperResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OperResult.DiscardUnknown(m)
}

var xxx_messageInfo_OperResult proto.InternalMessageInfo

func (m *OperResult) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *OperResult) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

type NULLMsgReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NULLMsgReq) Reset()         { *m = NULLMsgReq{} }
func (m *NULLMsgReq) String() string { return proto.CompactTextString(m) }
func (*NULLMsgReq) ProtoMessage()    {}
func (*NULLMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{1}
}

func (m *NULLMsgReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NULLMsgReq.Unmarshal(m, b)
}
func (m *NULLMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NULLMsgReq.Marshal(b, m, deterministic)
}
func (m *NULLMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NULLMsgReq.Merge(m, src)
}
func (m *NULLMsgReq) XXX_Size() int {
	return xxx_messageInfo_NULLMsgReq.Size(m)
}
func (m *NULLMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NULLMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_NULLMsgReq proto.InternalMessageInfo

type ClusterIDReq struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterIDReq) Reset()         { *m = ClusterIDReq{} }
func (m *ClusterIDReq) String() string { return proto.CompactTextString(m) }
func (*ClusterIDReq) ProtoMessage()    {}
func (*ClusterIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{2}
}

func (m *ClusterIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterIDReq.Unmarshal(m, b)
}
func (m *ClusterIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterIDReq.Marshal(b, m, deterministic)
}
func (m *ClusterIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterIDReq.Merge(m, src)
}
func (m *ClusterIDReq) XXX_Size() int {
	return xxx_messageInfo_ClusterIDReq.Size(m)
}
func (m *ClusterIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterIDReq proto.InternalMessageInfo

func (m *ClusterIDReq) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type HostIDReq struct {
	HostId               string   `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostIDReq) Reset()         { *m = HostIDReq{} }
func (m *HostIDReq) String() string { return proto.CompactTextString(m) }
func (*HostIDReq) ProtoMessage()    {}
func (*HostIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{3}
}

func (m *HostIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostIDReq.Unmarshal(m, b)
}
func (m *HostIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostIDReq.Marshal(b, m, deterministic)
}
func (m *HostIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostIDReq.Merge(m, src)
}
func (m *HostIDReq) XXX_Size() int {
	return xxx_messageInfo_HostIDReq.Size(m)
}
func (m *HostIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HostIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_HostIDReq proto.InternalMessageInfo

func (m *HostIDReq) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

type ClusterIDListReq struct {
	ClusterId            []string `protobuf:"bytes,1,rep,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterIDListReq) Reset()         { *m = ClusterIDListReq{} }
func (m *ClusterIDListReq) String() string { return proto.CompactTextString(m) }
func (*ClusterIDListReq) ProtoMessage()    {}
func (*ClusterIDListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{4}
}

func (m *ClusterIDListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterIDListReq.Unmarshal(m, b)
}
func (m *ClusterIDListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterIDListReq.Marshal(b, m, deterministic)
}
func (m *ClusterIDListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterIDListReq.Merge(m, src)
}
func (m *ClusterIDListReq) XXX_Size() int {
	return xxx_messageInfo_ClusterIDListReq.Size(m)
}
func (m *ClusterIDListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterIDListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterIDListReq proto.InternalMessageInfo

func (m *ClusterIDListReq) GetClusterId() []string {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

type ServiceOperation struct {
	ServiceKey           string   `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
	Operation            int32    `protobuf:"varint,2,opt,name=operation,proto3" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceOperation) Reset()         { *m = ServiceOperation{} }
func (m *ServiceOperation) String() string { return proto.CompactTextString(m) }
func (*ServiceOperation) ProtoMessage()    {}
func (*ServiceOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{5}
}

func (m *ServiceOperation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceOperation.Unmarshal(m, b)
}
func (m *ServiceOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceOperation.Marshal(b, m, deterministic)
}
func (m *ServiceOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceOperation.Merge(m, src)
}
func (m *ServiceOperation) XXX_Size() int {
	return xxx_messageInfo_ServiceOperation.Size(m)
}
func (m *ServiceOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceOperation.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceOperation proto.InternalMessageInfo

func (m *ServiceOperation) GetServiceKey() string {
	if m != nil {
		return m.ServiceKey
	}
	return ""
}

func (m *ServiceOperation) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

type OneClusterInfo struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	State                int32    `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	MultiAddr            string   `protobuf:"bytes,3,opt,name=multi_addr,json=multiAddr,proto3" json:"multi_addr,omitempty"`
	MultiPort            string   `protobuf:"bytes,4,opt,name=multi_port,json=multiPort,proto3" json:"multi_port,omitempty"`
	BalanceType          string   `protobuf:"bytes,5,opt,name=balance_type,json=balanceType,proto3" json:"balance_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OneClusterInfo) Reset()         { *m = OneClusterInfo{} }
func (m *OneClusterInfo) String() string { return proto.CompactTextString(m) }
func (*OneClusterInfo) ProtoMessage()    {}
func (*OneClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{6}
}

func (m *OneClusterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OneClusterInfo.Unmarshal(m, b)
}
func (m *OneClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OneClusterInfo.Marshal(b, m, deterministic)
}
func (m *OneClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneClusterInfo.Merge(m, src)
}
func (m *OneClusterInfo) XXX_Size() int {
	return xxx_messageInfo_OneClusterInfo.Size(m)
}
func (m *OneClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OneClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OneClusterInfo proto.InternalMessageInfo

func (m *OneClusterInfo) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *OneClusterInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *OneClusterInfo) GetMultiAddr() string {
	if m != nil {
		return m.MultiAddr
	}
	return ""
}

func (m *OneClusterInfo) GetMultiPort() string {
	if m != nil {
		return m.MultiPort
	}
	return ""
}

func (m *OneClusterInfo) GetBalanceType() string {
	if m != nil {
		return m.BalanceType
	}
	return ""
}

type ClusterSimpleInfoRsp struct {
	ClusterInfo          []*OneClusterInfo `protobuf:"bytes,1,rep,name=cluster_info,json=clusterInfo,proto3" json:"cluster_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClusterSimpleInfoRsp) Reset()         { *m = ClusterSimpleInfoRsp{} }
func (m *ClusterSimpleInfoRsp) String() string { return proto.CompactTextString(m) }
func (*ClusterSimpleInfoRsp) ProtoMessage()    {}
func (*ClusterSimpleInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{7}
}

func (m *ClusterSimpleInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterSimpleInfoRsp.Unmarshal(m, b)
}
func (m *ClusterSimpleInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterSimpleInfoRsp.Marshal(b, m, deterministic)
}
func (m *ClusterSimpleInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterSimpleInfoRsp.Merge(m, src)
}
func (m *ClusterSimpleInfoRsp) XXX_Size() int {
	return xxx_messageInfo_ClusterSimpleInfoRsp.Size(m)
}
func (m *ClusterSimpleInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterSimpleInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterSimpleInfoRsp proto.InternalMessageInfo

func (m *ClusterSimpleInfoRsp) GetClusterInfo() []*OneClusterInfo {
	if m != nil {
		return m.ClusterInfo
	}
	return nil
}

type DeviceStateReq struct {
	HostId               string              `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	ServiceOper          []*ServiceOperation `protobuf:"bytes,2,rep,name=service_oper,json=serviceOper,proto3" json:"service_oper,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DeviceStateReq) Reset()         { *m = DeviceStateReq{} }
func (m *DeviceStateReq) String() string { return proto.CompactTextString(m) }
func (*DeviceStateReq) ProtoMessage()    {}
func (*DeviceStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{8}
}

func (m *DeviceStateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceStateReq.Unmarshal(m, b)
}
func (m *DeviceStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceStateReq.Marshal(b, m, deterministic)
}
func (m *DeviceStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStateReq.Merge(m, src)
}
func (m *DeviceStateReq) XXX_Size() int {
	return xxx_messageInfo_DeviceStateReq.Size(m)
}
func (m *DeviceStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStateReq proto.InternalMessageInfo

func (m *DeviceStateReq) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *DeviceStateReq) GetServiceOper() []*ServiceOperation {
	if m != nil {
		return m.ServiceOper
	}
	return nil
}

type ServiceState struct {
	ServiceKey           string   `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
	ServiceChineseName   string   `protobuf:"bytes,2,opt,name=service_chinese_name,json=serviceChineseName,proto3" json:"service_chinese_name,omitempty"`
	OperResult           int32    `protobuf:"varint,3,opt,name=oper_result,json=operResult,proto3" json:"oper_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceState) Reset()         { *m = ServiceState{} }
func (m *ServiceState) String() string { return proto.CompactTextString(m) }
func (*ServiceState) ProtoMessage()    {}
func (*ServiceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{9}
}

func (m *ServiceState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceState.Unmarshal(m, b)
}
func (m *ServiceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceState.Marshal(b, m, deterministic)
}
func (m *ServiceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceState.Merge(m, src)
}
func (m *ServiceState) XXX_Size() int {
	return xxx_messageInfo_ServiceState.Size(m)
}
func (m *ServiceState) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceState.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceState proto.InternalMessageInfo

func (m *ServiceState) GetServiceKey() string {
	if m != nil {
		return m.ServiceKey
	}
	return ""
}

func (m *ServiceState) GetServiceChineseName() string {
	if m != nil {
		return m.ServiceChineseName
	}
	return ""
}

func (m *ServiceState) GetOperResult() int32 {
	if m != nil {
		return m.OperResult
	}
	return 0
}

type DeviceStateRsp struct {
	ServiceState         []*ServiceState `protobuf:"bytes,1,rep,name=service_state,json=serviceState,proto3" json:"service_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DeviceStateRsp) Reset()         { *m = DeviceStateRsp{} }
func (m *DeviceStateRsp) String() string { return proto.CompactTextString(m) }
func (*DeviceStateRsp) ProtoMessage()    {}
func (*DeviceStateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{10}
}

func (m *DeviceStateRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceStateRsp.Unmarshal(m, b)
}
func (m *DeviceStateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceStateRsp.Marshal(b, m, deterministic)
}
func (m *DeviceStateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStateRsp.Merge(m, src)
}
func (m *DeviceStateRsp) XXX_Size() int {
	return xxx_messageInfo_DeviceStateRsp.Size(m)
}
func (m *DeviceStateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStateRsp proto.InternalMessageInfo

func (m *DeviceStateRsp) GetServiceState() []*ServiceState {
	if m != nil {
		return m.ServiceState
	}
	return nil
}

type ClusterDetailInfoRsp struct {
	SocsInfo             *ClusterBalanceInfo `protobuf:"bytes,1,opt,name=socs_info,json=socsInfo,proto3" json:"socs_info,omitempty"`
	AppInfo              *ClusterAppInfo     `protobuf:"bytes,2,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
	LogInfo              *ClusterLogInfo     `protobuf:"bytes,3,opt,name=log_info,json=logInfo,proto3" json:"log_info,omitempty"`
	CacheInfo            *ClusterCacheInfo   `protobuf:"bytes,4,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClusterDetailInfoRsp) Reset()         { *m = ClusterDetailInfoRsp{} }
func (m *ClusterDetailInfoRsp) String() string { return proto.CompactTextString(m) }
func (*ClusterDetailInfoRsp) ProtoMessage()    {}
func (*ClusterDetailInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{11}
}

func (m *ClusterDetailInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterDetailInfoRsp.Unmarshal(m, b)
}
func (m *ClusterDetailInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterDetailInfoRsp.Marshal(b, m, deterministic)
}
func (m *ClusterDetailInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDetailInfoRsp.Merge(m, src)
}
func (m *ClusterDetailInfoRsp) XXX_Size() int {
	return xxx_messageInfo_ClusterDetailInfoRsp.Size(m)
}
func (m *ClusterDetailInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDetailInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDetailInfoRsp proto.InternalMessageInfo

func (m *ClusterDetailInfoRsp) GetSocsInfo() *ClusterBalanceInfo {
	if m != nil {
		return m.SocsInfo
	}
	return nil
}

func (m *ClusterDetailInfoRsp) GetAppInfo() *ClusterAppInfo {
	if m != nil {
		return m.AppInfo
	}
	return nil
}

func (m *ClusterDetailInfoRsp) GetLogInfo() *ClusterLogInfo {
	if m != nil {
		return m.LogInfo
	}
	return nil
}

func (m *ClusterDetailInfoRsp) GetCacheInfo() *ClusterCacheInfo {
	if m != nil {
		return m.CacheInfo
	}
	return nil
}

type VipInterval struct {
	BeginVip             string   `protobuf:"bytes,1,opt,name=begin_vip,json=beginVip,proto3" json:"begin_vip,omitempty"`
	EndVip               string   `protobuf:"bytes,2,opt,name=end_vip,json=endVip,proto3" json:"end_vip,omitempty"`
	Length               int32    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipInterval) Reset()         { *m = VipInterval{} }
func (m *VipInterval) String() string { return proto.CompactTextString(m) }
func (*VipInterval) ProtoMessage()    {}
func (*VipInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{12}
}

func (m *VipInterval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VipInterval.Unmarshal(m, b)
}
func (m *VipInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VipInterval.Marshal(b, m, deterministic)
}
func (m *VipInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipInterval.Merge(m, src)
}
func (m *VipInterval) XXX_Size() int {
	return xxx_messageInfo_VipInterval.Size(m)
}
func (m *VipInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_VipInterval.DiscardUnknown(m)
}

var xxx_messageInfo_VipInterval proto.InternalMessageInfo

func (m *VipInterval) GetBeginVip() string {
	if m != nil {
		return m.BeginVip
	}
	return ""
}

func (m *VipInterval) GetEndVip() string {
	if m != nil {
		return m.EndVip
	}
	return ""
}

func (m *VipInterval) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type NodeHost struct {
	HostId               string   `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	NodeId               string   `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeHost) Reset()         { *m = NodeHost{} }
func (m *NodeHost) String() string { return proto.CompactTextString(m) }
func (*NodeHost) ProtoMessage()    {}
func (*NodeHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{13}
}

func (m *NodeHost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeHost.Unmarshal(m, b)
}
func (m *NodeHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeHost.Marshal(b, m, deterministic)
}
func (m *NodeHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeHost.Merge(m, src)
}
func (m *NodeHost) XXX_Size() int {
	return xxx_messageInfo_NodeHost.Size(m)
}
func (m *NodeHost) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeHost.DiscardUnknown(m)
}

var xxx_messageInfo_NodeHost proto.InternalMessageInfo

func (m *NodeHost) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *NodeHost) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type ClusterBalanceInfo struct {
	ClusterName          string         `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	KeepAliveTime        int32          `protobuf:"varint,4,opt,name=keep_alive_time,json=keepAliveTime,proto3" json:"keep_alive_time,omitempty"`
	DeadTime             int32          `protobuf:"varint,5,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	StableTime           int32          `protobuf:"varint,6,opt,name=stable_time,json=stableTime,proto3" json:"stable_time,omitempty"`
	ClusterType          string         `protobuf:"bytes,7,opt,name=cluster_type,json=clusterType,proto3" json:"cluster_type,omitempty"`
	MultiAddr            string         `protobuf:"bytes,8,opt,name=multi_addr,json=multiAddr,proto3" json:"multi_addr,omitempty"`
	MultiPort            string         `protobuf:"bytes,9,opt,name=multi_port,json=multiPort,proto3" json:"multi_port,omitempty"`
	NodeHost             []*NodeHost    `protobuf:"bytes,10,rep,name=node_host,json=nodeHost,proto3" json:"node_host,omitempty"`
	BalanceType          int32          `protobuf:"varint,11,opt,name=balance_type,json=balanceType,proto3" json:"balance_type,omitempty"`
	Ipv4Vip              []*VipInterval `protobuf:"bytes,12,rep,name=ipv4_vip,json=ipv4Vip,proto3" json:"ipv4_vip,omitempty"`
	Ipv6Vip              []*VipInterval `protobuf:"bytes,13,rep,name=ipv6_vip,json=ipv6Vip,proto3" json:"ipv6_vip,omitempty"`
	MaxConnection        string         `protobuf:"bytes,14,opt,name=max_connection,json=maxConnection,proto3" json:"max_connection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClusterBalanceInfo) Reset()         { *m = ClusterBalanceInfo{} }
func (m *ClusterBalanceInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterBalanceInfo) ProtoMessage()    {}
func (*ClusterBalanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{14}
}

func (m *ClusterBalanceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterBalanceInfo.Unmarshal(m, b)
}
func (m *ClusterBalanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterBalanceInfo.Marshal(b, m, deterministic)
}
func (m *ClusterBalanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterBalanceInfo.Merge(m, src)
}
func (m *ClusterBalanceInfo) XXX_Size() int {
	return xxx_messageInfo_ClusterBalanceInfo.Size(m)
}
func (m *ClusterBalanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterBalanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterBalanceInfo proto.InternalMessageInfo

func (m *ClusterBalanceInfo) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterBalanceInfo) GetKeepAliveTime() int32 {
	if m != nil {
		return m.KeepAliveTime
	}
	return 0
}

func (m *ClusterBalanceInfo) GetDeadTime() int32 {
	if m != nil {
		return m.DeadTime
	}
	return 0
}

func (m *ClusterBalanceInfo) GetStableTime() int32 {
	if m != nil {
		return m.StableTime
	}
	return 0
}

func (m *ClusterBalanceInfo) GetClusterType() string {
	if m != nil {
		return m.ClusterType
	}
	return ""
}

func (m *ClusterBalanceInfo) GetMultiAddr() string {
	if m != nil {
		return m.MultiAddr
	}
	return ""
}

func (m *ClusterBalanceInfo) GetMultiPort() string {
	if m != nil {
		return m.MultiPort
	}
	return ""
}

func (m *ClusterBalanceInfo) GetNodeHost() []*NodeHost {
	if m != nil {
		return m.NodeHost
	}
	return nil
}

func (m *ClusterBalanceInfo) GetBalanceType() int32 {
	if m != nil {
		return m.BalanceType
	}
	return 0
}

func (m *ClusterBalanceInfo) GetIpv4Vip() []*VipInterval {
	if m != nil {
		return m.Ipv4Vip
	}
	return nil
}

func (m *ClusterBalanceInfo) GetIpv6Vip() []*VipInterval {
	if m != nil {
		return m.Ipv6Vip
	}
	return nil
}

func (m *ClusterBalanceInfo) GetMaxConnection() string {
	if m != nil {
		return m.MaxConnection
	}
	return ""
}

type ResourceType struct {
	RaltFilterTypes      []string `protobuf:"bytes,1,rep,name=ralt_filter_types,json=raltFilterTypes,proto3" json:"ralt_filter_types,omitempty"`
	IgnoreSubfix         []string `protobuf:"bytes,2,rep,name=ignore_subfix,json=ignoreSubfix,proto3" json:"ignore_subfix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceType) Reset()         { *m = ResourceType{} }
func (m *ResourceType) String() string { return proto.CompactTextString(m) }
func (*ResourceType) ProtoMessage()    {}
func (*ResourceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{15}
}

func (m *ResourceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceType.Unmarshal(m, b)
}
func (m *ResourceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceType.Marshal(b, m, deterministic)
}
func (m *ResourceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceType.Merge(m, src)
}
func (m *ResourceType) XXX_Size() int {
	return xxx_messageInfo_ResourceType.Size(m)
}
func (m *ResourceType) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceType.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceType proto.InternalMessageInfo

func (m *ResourceType) GetRaltFilterTypes() []string {
	if m != nil {
		return m.RaltFilterTypes
	}
	return nil
}

func (m *ResourceType) GetIgnoreSubfix() []string {
	if m != nil {
		return m.IgnoreSubfix
	}
	return nil
}

type ForbiddenBrowser struct {
	BrowserName          string   `protobuf:"bytes,1,opt,name=browser_name,json=browserName,proto3" json:"browser_name,omitempty"`
	Domain               []string `protobuf:"bytes,2,rep,name=domain,proto3" json:"domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForbiddenBrowser) Reset()         { *m = ForbiddenBrowser{} }
func (m *ForbiddenBrowser) String() string { return proto.CompactTextString(m) }
func (*ForbiddenBrowser) ProtoMessage()    {}
func (*ForbiddenBrowser) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{16}
}

func (m *ForbiddenBrowser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForbiddenBrowser.Unmarshal(m, b)
}
func (m *ForbiddenBrowser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForbiddenBrowser.Marshal(b, m, deterministic)
}
func (m *ForbiddenBrowser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbiddenBrowser.Merge(m, src)
}
func (m *ForbiddenBrowser) XXX_Size() int {
	return xxx_messageInfo_ForbiddenBrowser.Size(m)
}
func (m *ForbiddenBrowser) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbiddenBrowser.DiscardUnknown(m)
}

var xxx_messageInfo_ForbiddenBrowser proto.InternalMessageInfo

func (m *ForbiddenBrowser) GetBrowserName() string {
	if m != nil {
		return m.BrowserName
	}
	return ""
}

func (m *ForbiddenBrowser) GetDomain() []string {
	if m != nil {
		return m.Domain
	}
	return nil
}

type ClusterAppInfo struct {
	ResourceType         *ResourceType       `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	RaltRefererDefault   int32               `protobuf:"varint,4,opt,name=ralt_referer_default,json=raltRefererDefault,proto3" json:"ralt_referer_default,omitempty"`
	InsertRequestViaStr  string              `protobuf:"bytes,5,opt,name=insert_request_via_str,json=insertRequestViaStr,proto3" json:"insert_request_via_str,omitempty"`
	InsertResponseViaStr string              `protobuf:"bytes,6,opt,name=insert_response_via_str,json=insertResponseViaStr,proto3" json:"insert_response_via_str,omitempty"`
	ForbiddenBrowser     []*ForbiddenBrowser `protobuf:"bytes,7,rep,name=forbidden_browser,json=forbiddenBrowser,proto3" json:"forbidden_browser,omitempty"`
	InsertXForwardedFor  int32               `protobuf:"varint,8,opt,name=insert_x_forwarded_for,json=insertXForwardedFor,proto3" json:"insert_x_forwarded_for,omitempty"`
	Redirect             string              `protobuf:"bytes,9,opt,name=redirect,proto3" json:"redirect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClusterAppInfo) Reset()         { *m = ClusterAppInfo{} }
func (m *ClusterAppInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterAppInfo) ProtoMessage()    {}
func (*ClusterAppInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{17}
}

func (m *ClusterAppInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterAppInfo.Unmarshal(m, b)
}
func (m *ClusterAppInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterAppInfo.Marshal(b, m, deterministic)
}
func (m *ClusterAppInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterAppInfo.Merge(m, src)
}
func (m *ClusterAppInfo) XXX_Size() int {
	return xxx_messageInfo_ClusterAppInfo.Size(m)
}
func (m *ClusterAppInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterAppInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterAppInfo proto.InternalMessageInfo

func (m *ClusterAppInfo) GetResourceType() *ResourceType {
	if m != nil {
		return m.ResourceType
	}
	return nil
}

func (m *ClusterAppInfo) GetRaltRefererDefault() int32 {
	if m != nil {
		return m.RaltRefererDefault
	}
	return 0
}

func (m *ClusterAppInfo) GetInsertRequestViaStr() string {
	if m != nil {
		return m.InsertRequestViaStr
	}
	return ""
}

func (m *ClusterAppInfo) GetInsertResponseViaStr() string {
	if m != nil {
		return m.InsertResponseViaStr
	}
	return ""
}

func (m *ClusterAppInfo) GetForbiddenBrowser() []*ForbiddenBrowser {
	if m != nil {
		return m.ForbiddenBrowser
	}
	return nil
}

func (m *ClusterAppInfo) GetInsertXForwardedFor() int32 {
	if m != nil {
		return m.InsertXForwardedFor
	}
	return 0
}

func (m *ClusterAppInfo) GetRedirect() string {
	if m != nil {
		return m.Redirect
	}
	return ""
}

type ClusterLogInfo struct {
	IsOn                 int32    `protobuf:"varint,3,opt,name=is_on,json=isOn,proto3" json:"is_on,omitempty"`
	NodeLogSize          int32    `protobuf:"varint,4,opt,name=node_log_size,json=nodeLogSize,proto3" json:"node_log_size,omitempty"`
	IsDebug              int32    `protobuf:"varint,5,opt,name=is_debug,json=isDebug,proto3" json:"is_debug,omitempty"`
	DebugType            string   `protobuf:"bytes,6,opt,name=debug_type,json=debugType,proto3" json:"debug_type,omitempty"`
	RemoteLogIp          string   `protobuf:"bytes,7,opt,name=remote_log_ip,json=remoteLogIp,proto3" json:"remote_log_ip,omitempty"`
	RemoteLogPort        int32    `protobuf:"varint,8,opt,name=remote_log_port,json=remoteLogPort,proto3" json:"remote_log_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterLogInfo) Reset()         { *m = ClusterLogInfo{} }
func (m *ClusterLogInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterLogInfo) ProtoMessage()    {}
func (*ClusterLogInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{18}
}

func (m *ClusterLogInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterLogInfo.Unmarshal(m, b)
}
func (m *ClusterLogInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterLogInfo.Marshal(b, m, deterministic)
}
func (m *ClusterLogInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLogInfo.Merge(m, src)
}
func (m *ClusterLogInfo) XXX_Size() int {
	return xxx_messageInfo_ClusterLogInfo.Size(m)
}
func (m *ClusterLogInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLogInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLogInfo proto.InternalMessageInfo

func (m *ClusterLogInfo) GetIsOn() int32 {
	if m != nil {
		return m.IsOn
	}
	return 0
}

func (m *ClusterLogInfo) GetNodeLogSize() int32 {
	if m != nil {
		return m.NodeLogSize
	}
	return 0
}

func (m *ClusterLogInfo) GetIsDebug() int32 {
	if m != nil {
		return m.IsDebug
	}
	return 0
}

func (m *ClusterLogInfo) GetDebugType() string {
	if m != nil {
		return m.DebugType
	}
	return ""
}

func (m *ClusterLogInfo) GetRemoteLogIp() string {
	if m != nil {
		return m.RemoteLogIp
	}
	return ""
}

func (m *ClusterLogInfo) GetRemoteLogPort() int32 {
	if m != nil {
		return m.RemoteLogPort
	}
	return 0
}

type ClusterCacheInfo struct {
	IsCacheOpen          int32    `protobuf:"varint,3,opt,name=is_cache_open,json=isCacheOpen,proto3" json:"is_cache_open,omitempty"`
	IsCookieCacheOpen    int32    `protobuf:"varint,4,opt,name=is_cookie_cache_open,json=isCookieCacheOpen,proto3" json:"is_cookie_cache_open,omitempty"`
	RamCacheSize         int32    `protobuf:"varint,5,opt,name=ram_cache_size,json=ramCacheSize,proto3" json:"ram_cache_size,omitempty"`
	CacheDbSize          int32    `protobuf:"varint,6,opt,name=cache_db_size,json=cacheDbSize,proto3" json:"cache_db_size,omitempty"`
	CacheDbPath          string   `protobuf:"bytes,7,opt,name=cache_db_path,json=cacheDbPath,proto3" json:"cache_db_path,omitempty"`
	CacheStrategy        int32    `protobuf:"varint,8,opt,name=cache_strategy,json=cacheStrategy,proto3" json:"cache_strategy,omitempty"`
	RequiredHeaders      string   `protobuf:"bytes,9,opt,name=required_headers,json=requiredHeaders,proto3" json:"required_headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterCacheInfo) Reset()         { *m = ClusterCacheInfo{} }
func (m *ClusterCacheInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterCacheInfo) ProtoMessage()    {}
func (*ClusterCacheInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{19}
}

func (m *ClusterCacheInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterCacheInfo.Unmarshal(m, b)
}
func (m *ClusterCacheInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterCacheInfo.Marshal(b, m, deterministic)
}
func (m *ClusterCacheInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCacheInfo.Merge(m, src)
}
func (m *ClusterCacheInfo) XXX_Size() int {
	return xxx_messageInfo_ClusterCacheInfo.Size(m)
}
func (m *ClusterCacheInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCacheInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCacheInfo proto.InternalMessageInfo

func (m *ClusterCacheInfo) GetIsCacheOpen() int32 {
	if m != nil {
		return m.IsCacheOpen
	}
	return 0
}

func (m *ClusterCacheInfo) GetIsCookieCacheOpen() int32 {
	if m != nil {
		return m.IsCookieCacheOpen
	}
	return 0
}

func (m *ClusterCacheInfo) GetRamCacheSize() int32 {
	if m != nil {
		return m.RamCacheSize
	}
	return 0
}

func (m *ClusterCacheInfo) GetCacheDbSize() int32 {
	if m != nil {
		return m.CacheDbSize
	}
	return 0
}

func (m *ClusterCacheInfo) GetCacheDbPath() string {
	if m != nil {
		return m.CacheDbPath
	}
	return ""
}

func (m *ClusterCacheInfo) GetCacheStrategy() int32 {
	if m != nil {
		return m.CacheStrategy
	}
	return 0
}

func (m *ClusterCacheInfo) GetRequiredHeaders() string {
	if m != nil {
		return m.RequiredHeaders
	}
	return ""
}

type ClusterPublicInfoReq struct {
	ClusterId            string              `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	OperType             int32               `protobuf:"varint,2,opt,name=oper_type,json=operType,proto3" json:"oper_type,omitempty"`
	BalanceInfo          *ClusterBalanceInfo `protobuf:"bytes,3,opt,name=balance_info,json=balanceInfo,proto3" json:"balance_info,omitempty"`
	AppInfo              *ClusterAppInfo     `protobuf:"bytes,4,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
	LogInfo              *ClusterLogInfo     `protobuf:"bytes,5,opt,name=log_info,json=logInfo,proto3" json:"log_info,omitempty"`
	CacheInfo            *ClusterCacheInfo   `protobuf:"bytes,6,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClusterPublicInfoReq) Reset()         { *m = ClusterPublicInfoReq{} }
func (m *ClusterPublicInfoReq) String() string { return proto.CompactTextString(m) }
func (*ClusterPublicInfoReq) ProtoMessage()    {}
func (*ClusterPublicInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{20}
}

func (m *ClusterPublicInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterPublicInfoReq.Unmarshal(m, b)
}
func (m *ClusterPublicInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterPublicInfoReq.Marshal(b, m, deterministic)
}
func (m *ClusterPublicInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterPublicInfoReq.Merge(m, src)
}
func (m *ClusterPublicInfoReq) XXX_Size() int {
	return xxx_messageInfo_ClusterPublicInfoReq.Size(m)
}
func (m *ClusterPublicInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterPublicInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterPublicInfoReq proto.InternalMessageInfo

func (m *ClusterPublicInfoReq) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterPublicInfoReq) GetOperType() int32 {
	if m != nil {
		return m.OperType
	}
	return 0
}

func (m *ClusterPublicInfoReq) GetBalanceInfo() *ClusterBalanceInfo {
	if m != nil {
		return m.BalanceInfo
	}
	return nil
}

func (m *ClusterPublicInfoReq) GetAppInfo() *ClusterAppInfo {
	if m != nil {
		return m.AppInfo
	}
	return nil
}

func (m *ClusterPublicInfoReq) GetLogInfo() *ClusterLogInfo {
	if m != nil {
		return m.LogInfo
	}
	return nil
}

func (m *ClusterPublicInfoReq) GetCacheInfo() *ClusterCacheInfo {
	if m != nil {
		return m.CacheInfo
	}
	return nil
}

type DeviceUsageRsp struct {
	CpuUsage             string   `protobuf:"bytes,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemUsage             string   `protobuf:"bytes,2,opt,name=mem_usage,json=memUsage,proto3" json:"mem_usage,omitempty"`
	DiskUsage            string   `protobuf:"bytes,3,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
	IsOffline            int32    `protobuf:"varint,4,opt,name=is_offline,json=isOffline,proto3" json:"is_offline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceUsageRsp) Reset()         { *m = DeviceUsageRsp{} }
func (m *DeviceUsageRsp) String() string { return proto.CompactTextString(m) }
func (*DeviceUsageRsp) ProtoMessage()    {}
func (*DeviceUsageRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{21}
}

func (m *DeviceUsageRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceUsageRsp.Unmarshal(m, b)
}
func (m *DeviceUsageRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceUsageRsp.Marshal(b, m, deterministic)
}
func (m *DeviceUsageRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUsageRsp.Merge(m, src)
}
func (m *DeviceUsageRsp) XXX_Size() int {
	return xxx_messageInfo_DeviceUsageRsp.Size(m)
}
func (m *DeviceUsageRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUsageRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUsageRsp proto.InternalMessageInfo

func (m *DeviceUsageRsp) GetCpuUsage() string {
	if m != nil {
		return m.CpuUsage
	}
	return ""
}

func (m *DeviceUsageRsp) GetMemUsage() string {
	if m != nil {
		return m.MemUsage
	}
	return ""
}

func (m *DeviceUsageRsp) GetDiskUsage() string {
	if m != nil {
		return m.DiskUsage
	}
	return ""
}

func (m *DeviceUsageRsp) GetIsOffline() int32 {
	if m != nil {
		return m.IsOffline
	}
	return 0
}

type ManageIPReq struct {
	IsIpv4               int32    `protobuf:"varint,1,opt,name=is_ipv4,json=isIpv4,proto3" json:"is_ipv4,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManageIPReq) Reset()         { *m = ManageIPReq{} }
func (m *ManageIPReq) String() string { return proto.CompactTextString(m) }
func (*ManageIPReq) ProtoMessage()    {}
func (*ManageIPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{22}
}

func (m *ManageIPReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManageIPReq.Unmarshal(m, b)
}
func (m *ManageIPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManageIPReq.Marshal(b, m, deterministic)
}
func (m *ManageIPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManageIPReq.Merge(m, src)
}
func (m *ManageIPReq) XXX_Size() int {
	return xxx_messageInfo_ManageIPReq.Size(m)
}
func (m *ManageIPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ManageIPReq.DiscardUnknown(m)
}

var xxx_messageInfo_ManageIPReq proto.InternalMessageInfo

func (m *ManageIPReq) GetIsIpv4() int32 {
	if m != nil {
		return m.IsIpv4
	}
	return 0
}

func (m *ManageIPReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type IsExistResp struct {
	IsExist              int32    `protobuf:"varint,1,opt,name=is_exist,json=isExist,proto3" json:"is_exist,omitempty"`
	HostId               string   `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsExistResp) Reset()         { *m = IsExistResp{} }
func (m *IsExistResp) String() string { return proto.CompactTextString(m) }
func (*IsExistResp) ProtoMessage()    {}
func (*IsExistResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{23}
}

func (m *IsExistResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsExistResp.Unmarshal(m, b)
}
func (m *IsExistResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsExistResp.Marshal(b, m, deterministic)
}
func (m *IsExistResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsExistResp.Merge(m, src)
}
func (m *IsExistResp) XXX_Size() int {
	return xxx_messageInfo_IsExistResp.Size(m)
}
func (m *IsExistResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsExistResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsExistResp proto.InternalMessageInfo

func (m *IsExistResp) GetIsExist() int32 {
	if m != nil {
		return m.IsExist
	}
	return 0
}

func (m *IsExistResp) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

type DeviceIDReq struct {
	HostId               []string `protobuf:"bytes,1,rep,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceIDReq) Reset()         { *m = DeviceIDReq{} }
func (m *DeviceIDReq) String() string { return proto.CompactTextString(m) }
func (*DeviceIDReq) ProtoMessage()    {}
func (*DeviceIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{24}
}

func (m *DeviceIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceIDReq.Unmarshal(m, b)
}
func (m *DeviceIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceIDReq.Marshal(b, m, deterministic)
}
func (m *DeviceIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceIDReq.Merge(m, src)
}
func (m *DeviceIDReq) XXX_Size() int {
	return xxx_messageInfo_DeviceIDReq.Size(m)
}
func (m *DeviceIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceIDReq proto.InternalMessageInfo

func (m *DeviceIDReq) GetHostId() []string {
	if m != nil {
		return m.HostId
	}
	return nil
}

type Device struct {
	HostId               string   `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	HostName             string   `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DeviceType           string   `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Ipv4Addr             string   `protobuf:"bytes,4,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`
	Ipv6Addr             string   `protobuf:"bytes,5,opt,name=ipv6_addr,json=ipv6Addr,proto3" json:"ipv6_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{25}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *Device) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *Device) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *Device) GetIpv4Addr() string {
	if m != nil {
		return m.Ipv4Addr
	}
	return ""
}

func (m *Device) GetIpv6Addr() string {
	if m != nil {
		return m.Ipv6Addr
	}
	return ""
}

type DevicesRsp struct {
	Device               []*Device `protobuf:"bytes,1,rep,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DevicesRsp) Reset()         { *m = DevicesRsp{} }
func (m *DevicesRsp) String() string { return proto.CompactTextString(m) }
func (*DevicesRsp) ProtoMessage()    {}
func (*DevicesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{26}
}

func (m *DevicesRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicesRsp.Unmarshal(m, b)
}
func (m *DevicesRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicesRsp.Marshal(b, m, deterministic)
}
func (m *DevicesRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicesRsp.Merge(m, src)
}
func (m *DevicesRsp) XXX_Size() int {
	return xxx_messageInfo_DevicesRsp.Size(m)
}
func (m *DevicesRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicesRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DevicesRsp proto.InternalMessageInfo

func (m *DevicesRsp) GetDevice() []*Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type UsedVIPReq struct {
	IsIpv4               bool     `protobuf:"varint,1,opt,name=is_ipv4,json=isIpv4,proto3" json:"is_ipv4,omitempty"`
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsedVIPReq) Reset()         { *m = UsedVIPReq{} }
func (m *UsedVIPReq) String() string { return proto.CompactTextString(m) }
func (*UsedVIPReq) ProtoMessage()    {}
func (*UsedVIPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{27}
}

func (m *UsedVIPReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsedVIPReq.Unmarshal(m, b)
}
func (m *UsedVIPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsedVIPReq.Marshal(b, m, deterministic)
}
func (m *UsedVIPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsedVIPReq.Merge(m, src)
}
func (m *UsedVIPReq) XXX_Size() int {
	return xxx_messageInfo_UsedVIPReq.Size(m)
}
func (m *UsedVIPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UsedVIPReq.DiscardUnknown(m)
}

var xxx_messageInfo_UsedVIPReq proto.InternalMessageInfo

func (m *UsedVIPReq) GetIsIpv4() bool {
	if m != nil {
		return m.IsIpv4
	}
	return false
}

func (m *UsedVIPReq) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type VIPCountRsp struct {
	UsedVip4Count        int32    `protobuf:"varint,1,opt,name=used_vip4_count,json=usedVip4Count,proto3" json:"used_vip4_count,omitempty"`
	UsedVip6Count        int32    `protobuf:"varint,2,opt,name=used_vip6_count,json=usedVip6Count,proto3" json:"used_vip6_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VIPCountRsp) Reset()         { *m = VIPCountRsp{} }
func (m *VIPCountRsp) String() string { return proto.CompactTextString(m) }
func (*VIPCountRsp) ProtoMessage()    {}
func (*VIPCountRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{28}
}

func (m *VIPCountRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VIPCountRsp.Unmarshal(m, b)
}
func (m *VIPCountRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VIPCountRsp.Marshal(b, m, deterministic)
}
func (m *VIPCountRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VIPCountRsp.Merge(m, src)
}
func (m *VIPCountRsp) XXX_Size() int {
	return xxx_messageInfo_VIPCountRsp.Size(m)
}
func (m *VIPCountRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_VIPCountRsp.DiscardUnknown(m)
}

var xxx_messageInfo_VIPCountRsp proto.InternalMessageInfo

func (m *VIPCountRsp) GetUsedVip4Count() int32 {
	if m != nil {
		return m.UsedVip4Count
	}
	return 0
}

func (m *VIPCountRsp) GetUsedVip6Count() int32 {
	if m != nil {
		return m.UsedVip6Count
	}
	return 0
}

type VIPListRsp struct {
	Vip                  []string `protobuf:"bytes,1,rep,name=vip,proto3" json:"vip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VIPListRsp) Reset()         { *m = VIPListRsp{} }
func (m *VIPListRsp) String() string { return proto.CompactTextString(m) }
func (*VIPListRsp) ProtoMessage()    {}
func (*VIPListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{29}
}

func (m *VIPListRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VIPListRsp.Unmarshal(m, b)
}
func (m *VIPListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VIPListRsp.Marshal(b, m, deterministic)
}
func (m *VIPListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VIPListRsp.Merge(m, src)
}
func (m *VIPListRsp) XXX_Size() int {
	return xxx_messageInfo_VIPListRsp.Size(m)
}
func (m *VIPListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_VIPListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_VIPListRsp proto.InternalMessageInfo

func (m *VIPListRsp) GetVip() []string {
	if m != nil {
		return m.Vip
	}
	return nil
}

type ServiceMsg struct {
	KeyName              string   `protobuf:"bytes,1,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	ChineseName          string   `protobuf:"bytes,2,opt,name=chinese_name,json=chineseName,proto3" json:"chinese_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceMsg) Reset()         { *m = ServiceMsg{} }
func (m *ServiceMsg) String() string { return proto.CompactTextString(m) }
func (*ServiceMsg) ProtoMessage()    {}
func (*ServiceMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{30}
}

func (m *ServiceMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceMsg.Unmarshal(m, b)
}
func (m *ServiceMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceMsg.Marshal(b, m, deterministic)
}
func (m *ServiceMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceMsg.Merge(m, src)
}
func (m *ServiceMsg) XXX_Size() int {
	return xxx_messageInfo_ServiceMsg.Size(m)
}
func (m *ServiceMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceMsg proto.InternalMessageInfo

func (m *ServiceMsg) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

func (m *ServiceMsg) GetChineseName() string {
	if m != nil {
		return m.ChineseName
	}
	return ""
}

type ServiceListRsp struct {
	Service              []*ServiceMsg `protobuf:"bytes,1,rep,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServiceListRsp) Reset()         { *m = ServiceListRsp{} }
func (m *ServiceListRsp) String() string { return proto.CompactTextString(m) }
func (*ServiceListRsp) ProtoMessage()    {}
func (*ServiceListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{31}
}

func (m *ServiceListRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceListRsp.Unmarshal(m, b)
}
func (m *ServiceListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceListRsp.Marshal(b, m, deterministic)
}
func (m *ServiceListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceListRsp.Merge(m, src)
}
func (m *ServiceListRsp) XXX_Size() int {
	return xxx_messageInfo_ServiceListRsp.Size(m)
}
func (m *ServiceListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceListRsp proto.InternalMessageInfo

func (m *ServiceListRsp) GetService() []*ServiceMsg {
	if m != nil {
		return m.Service
	}
	return nil
}

type FilterType struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FilterContent        string   `protobuf:"bytes,2,opt,name=filter_content,json=filterContent,proto3" json:"filter_content,omitempty"`
	Comment              string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilterType) Reset()         { *m = FilterType{} }
func (m *FilterType) String() string { return proto.CompactTextString(m) }
func (*FilterType) ProtoMessage()    {}
func (*FilterType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{32}
}

func (m *FilterType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterType.Unmarshal(m, b)
}
func (m *FilterType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterType.Marshal(b, m, deterministic)
}
func (m *FilterType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterType.Merge(m, src)
}
func (m *FilterType) XXX_Size() int {
	return xxx_messageInfo_FilterType.Size(m)
}
func (m *FilterType) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterType.DiscardUnknown(m)
}

var xxx_messageInfo_FilterType proto.InternalMessageInfo

func (m *FilterType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FilterType) GetFilterContent() string {
	if m != nil {
		return m.FilterContent
	}
	return ""
}

func (m *FilterType) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type RaltFilterTypeRsp struct {
	FilterType           []*FilterType `protobuf:"bytes,1,rep,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RaltFilterTypeRsp) Reset()         { *m = RaltFilterTypeRsp{} }
func (m *RaltFilterTypeRsp) String() string { return proto.CompactTextString(m) }
func (*RaltFilterTypeRsp) ProtoMessage()    {}
func (*RaltFilterTypeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{33}
}

func (m *RaltFilterTypeRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaltFilterTypeRsp.Unmarshal(m, b)
}
func (m *RaltFilterTypeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaltFilterTypeRsp.Marshal(b, m, deterministic)
}
func (m *RaltFilterTypeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaltFilterTypeRsp.Merge(m, src)
}
func (m *RaltFilterTypeRsp) XXX_Size() int {
	return xxx_messageInfo_RaltFilterTypeRsp.Size(m)
}
func (m *RaltFilterTypeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RaltFilterTypeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RaltFilterTypeRsp proto.InternalMessageInfo

func (m *RaltFilterTypeRsp) GetFilterType() []*FilterType {
	if m != nil {
		return m.FilterType
	}
	return nil
}

type RaltFilterTypeReq struct {
	ClusterId            string      `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	OperType             int32       `protobuf:"varint,2,opt,name=oper_type,json=operType,proto3" json:"oper_type,omitempty"`
	FilterType           *FilterType `protobuf:"bytes,3,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RaltFilterTypeReq) Reset()         { *m = RaltFilterTypeReq{} }
func (m *RaltFilterTypeReq) String() string { return proto.CompactTextString(m) }
func (*RaltFilterTypeReq) ProtoMessage()    {}
func (*RaltFilterTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{34}
}

func (m *RaltFilterTypeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaltFilterTypeReq.Unmarshal(m, b)
}
func (m *RaltFilterTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaltFilterTypeReq.Marshal(b, m, deterministic)
}
func (m *RaltFilterTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaltFilterTypeReq.Merge(m, src)
}
func (m *RaltFilterTypeReq) XXX_Size() int {
	return xxx_messageInfo_RaltFilterTypeReq.Size(m)
}
func (m *RaltFilterTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RaltFilterTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_RaltFilterTypeReq proto.InternalMessageInfo

func (m *RaltFilterTypeReq) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *RaltFilterTypeReq) GetOperType() int32 {
	if m != nil {
		return m.OperType
	}
	return 0
}

func (m *RaltFilterTypeReq) GetFilterType() *FilterType {
	if m != nil {
		return m.FilterType
	}
	return nil
}

func init() {
	proto.RegisterType((*OperResult)(nil), "ate_cluster.OperResult")
	proto.RegisterType((*NULLMsgReq)(nil), "ate_cluster.NULLMsgReq")
	proto.RegisterType((*ClusterIDReq)(nil), "ate_cluster.ClusterIDReq")
	proto.RegisterType((*HostIDReq)(nil), "ate_cluster.HostIDReq")
	proto.RegisterType((*ClusterIDListReq)(nil), "ate_cluster.ClusterIDListReq")
	proto.RegisterType((*ServiceOperation)(nil), "ate_cluster.ServiceOperation")
	proto.RegisterType((*OneClusterInfo)(nil), "ate_cluster.OneClusterInfo")
	proto.RegisterType((*ClusterSimpleInfoRsp)(nil), "ate_cluster.ClusterSimpleInfoRsp")
	proto.RegisterType((*DeviceStateReq)(nil), "ate_cluster.DeviceStateReq")
	proto.RegisterType((*ServiceState)(nil), "ate_cluster.ServiceState")
	proto.RegisterType((*DeviceStateRsp)(nil), "ate_cluster.DeviceStateRsp")
	proto.RegisterType((*ClusterDetailInfoRsp)(nil), "ate_cluster.ClusterDetailInfoRsp")
	proto.RegisterType((*VipInterval)(nil), "ate_cluster.VipInterval")
	proto.RegisterType((*NodeHost)(nil), "ate_cluster.NodeHost")
	proto.RegisterType((*ClusterBalanceInfo)(nil), "ate_cluster.ClusterBalanceInfo")
	proto.RegisterType((*ResourceType)(nil), "ate_cluster.ResourceType")
	proto.RegisterType((*ForbiddenBrowser)(nil), "ate_cluster.ForbiddenBrowser")
	proto.RegisterType((*ClusterAppInfo)(nil), "ate_cluster.ClusterAppInfo")
	proto.RegisterType((*ClusterLogInfo)(nil), "ate_cluster.ClusterLogInfo")
	proto.RegisterType((*ClusterCacheInfo)(nil), "ate_cluster.ClusterCacheInfo")
	proto.RegisterType((*ClusterPublicInfoReq)(nil), "ate_cluster.ClusterPublicInfoReq")
	proto.RegisterType((*DeviceUsageRsp)(nil), "ate_cluster.DeviceUsageRsp")
	proto.RegisterType((*ManageIPReq)(nil), "ate_cluster.ManageIPReq")
	proto.RegisterType((*IsExistResp)(nil), "ate_cluster.IsExistResp")
	proto.RegisterType((*DeviceIDReq)(nil), "ate_cluster.DeviceIDReq")
	proto.RegisterType((*Device)(nil), "ate_cluster.Device")
	proto.RegisterType((*DevicesRsp)(nil), "ate_cluster.DevicesRsp")
	proto.RegisterType((*UsedVIPReq)(nil), "ate_cluster.UsedVIPReq")
	proto.RegisterType((*VIPCountRsp)(nil), "ate_cluster.VIPCountRsp")
	proto.RegisterType((*VIPListRsp)(nil), "ate_cluster.VIPListRsp")
	proto.RegisterType((*ServiceMsg)(nil), "ate_cluster.ServiceMsg")
	proto.RegisterType((*ServiceListRsp)(nil), "ate_cluster.ServiceListRsp")
	proto.RegisterType((*FilterType)(nil), "ate_cluster.FilterType")
	proto.RegisterType((*RaltFilterTypeRsp)(nil), "ate_cluster.RaltFilterTypeRsp")
	proto.RegisterType((*RaltFilterTypeReq)(nil), "ate_cluster.RaltFilterTypeReq")
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor_3cfb3b8ec240c376) }

var fileDescriptor_3cfb3b8ec240c376 = []byte{
	// 1992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdb, 0x72, 0x1c, 0x49,
	0x11, 0xd5, 0x8c, 0x3c, 0xb7, 0x9c, 0x8b, 0xe4, 0xb2, 0xb0, 0xc6, 0x16, 0xde, 0x4b, 0xb1, 0x38,
	0x0c, 0x04, 0x66, 0xd7, 0x36, 0x0a, 0x88, 0x70, 0x10, 0x96, 0xa5, 0x35, 0x1e, 0xaf, 0x64, 0x89,
	0xd6, 0x5a, 0x41, 0x40, 0x6c, 0x74, 0xf4, 0x74, 0xd7, 0x8c, 0x2a, 0x34, 0x7d, 0x51, 0x55, 0x8f,
	0x56, 0xb3, 0x8f, 0xfb, 0x04, 0xc1, 0x17, 0xf0, 0x03, 0xf0, 0x23, 0xbc, 0xf3, 0x0b, 0x3c, 0xf1,
	0x1d, 0x44, 0x66, 0x55, 0xf7, 0x74, 0x8f, 0xc6, 0xb2, 0xd7, 0xbc, 0x75, 0xe5, 0xad, 0xb2, 0x32,
	0xb3, 0x4e, 0x65, 0x36, 0x74, 0xfd, 0xc9, 0x54, 0xa7, 0x42, 0x3d, 0x4c, 0x54, 0x9c, 0xc6, 0xac,
	0xed, 0xa5, 0xc2, 0xb5, 0x24, 0xfe, 0x0c, 0xe0, 0x30, 0x11, 0xca, 0x11, 0x7a, 0x3a, 0x49, 0xd9,
	0x1d, 0x68, 0x2a, 0x91, 0xba, 0x7e, 0x1c, 0x88, 0x7e, 0xe5, 0x93, 0xca, 0x83, 0x9a, 0xd3, 0x50,
	0x22, 0xdd, 0x8d, 0x03, 0xc1, 0x36, 0x01, 0x3f, 0xdd, 0x50, 0x8f, 0xfb, 0xd5, 0x4f, 0x2a, 0x0f,
	0x5a, 0x4e, 0x5d, 0x89, 0xf4, 0x40, 0x8f, 0x79, 0x07, 0xe0, 0xf5, 0x9b, 0xfd, 0xfd, 0x03, 0x3d,
	0x76, 0xc4, 0x39, 0xff, 0x25, 0x74, 0x76, 0x8d, 0xe9, 0xc1, 0x9e, 0x23, 0xce, 0xd9, 0x3d, 0x00,
	0xbb, 0x95, 0x2b, 0x03, 0xb2, 0xd9, 0x72, 0x5a, 0x96, 0x32, 0x08, 0xf8, 0x67, 0xd0, 0x7a, 0x19,
	0xeb, 0xd4, 0xc8, 0x6e, 0x42, 0xe3, 0x34, 0xd6, 0xe9, 0x5c, 0xb0, 0x8e, 0xcb, 0x41, 0xc0, 0xbf,
	0x80, 0xf5, 0xdc, 0xe8, 0xbe, 0xd4, 0xe9, 0x32, 0xc3, 0xab, 0x65, 0xc3, 0x7f, 0x80, 0xf5, 0x63,
	0xa1, 0x2e, 0xa4, 0x2f, 0xf0, 0x78, 0x5e, 0x2a, 0xe3, 0x88, 0x7d, 0x0c, 0x6d, 0x6d, 0x68, 0xee,
	0x99, 0x98, 0xd9, 0x3d, 0xc0, 0x92, 0xbe, 0x12, 0x33, 0xf6, 0x63, 0x68, 0xc5, 0x99, 0x34, 0x9d,
	0xb2, 0xe6, 0xcc, 0x09, 0xfc, 0x1f, 0x15, 0xe8, 0x1d, 0x46, 0x22, 0xf3, 0x24, 0x1a, 0xc5, 0xef,
	0x38, 0x1d, 0xdb, 0x80, 0x9a, 0x4e, 0xbd, 0x54, 0x58, 0x5b, 0x66, 0x81, 0x4a, 0xe1, 0x74, 0x92,
	0x4a, 0xd7, 0x0b, 0x02, 0xd5, 0x5f, 0x35, 0x4a, 0x44, 0xd9, 0x09, 0x02, 0x35, 0x67, 0x27, 0xb1,
	0x4a, 0xfb, 0x37, 0x0a, 0xec, 0xa3, 0x58, 0xa5, 0xec, 0x53, 0xe8, 0x0c, 0xbd, 0x89, 0x17, 0xf9,
	0xc2, 0x4d, 0x67, 0x89, 0xe8, 0xd7, 0x48, 0xa0, 0x6d, 0x69, 0x5f, 0xcf, 0x12, 0xc1, 0x4f, 0x60,
	0xc3, 0x3a, 0x79, 0x2c, 0xc3, 0x64, 0x22, 0xd0, 0x55, 0x47, 0x27, 0xec, 0x77, 0xd0, 0xc9, 0xbd,
	0x8d, 0x46, 0x31, 0x05, 0xad, 0xfd, 0x68, 0xeb, 0x61, 0xa1, 0x1e, 0x1e, 0x96, 0x0f, 0xe8, 0xb4,
	0xfd, 0xf9, 0x82, 0x9f, 0x41, 0x6f, 0x4f, 0x60, 0xac, 0x8e, 0xf1, 0x1c, 0xd7, 0x65, 0x8c, 0x3d,
	0x83, 0x4e, 0x16, 0x6a, 0x0c, 0x60, 0xbf, 0x4a, 0x5b, 0xdd, 0x2b, 0x6d, 0xb5, 0x98, 0x1f, 0x27,
	0xcb, 0x0e, 0x52, 0xf8, 0xf7, 0x15, 0xe8, 0x58, 0x09, 0xda, 0xee, 0xdd, 0xd9, 0xfb, 0x1c, 0x36,
	0x32, 0x01, 0xff, 0x54, 0x46, 0x42, 0x0b, 0x37, 0xf2, 0x42, 0x61, 0xcb, 0x95, 0x59, 0xde, 0xae,
	0x61, 0xbd, 0xf6, 0x42, 0x32, 0x89, 0xde, 0xb9, 0x8a, 0xaa, 0x9f, 0x52, 0x51, 0x73, 0x20, 0xce,
	0xef, 0x03, 0x3f, 0x2a, 0x9f, 0x98, 0x62, 0xd8, 0xcd, 0x36, 0x31, 0xa9, 0x35, 0x41, 0xbc, 0xb3,
	0xec, 0x64, 0x46, 0x29, 0x0b, 0x04, 0xad, 0xf8, 0xf7, 0xd5, 0x3c, 0x39, 0x7b, 0x22, 0xf5, 0xe4,
	0x24, 0x4b, 0xce, 0x53, 0x68, 0xe9, 0xd8, 0xd7, 0x59, 0x66, 0x2a, 0x0f, 0xda, 0x8f, 0x3e, 0x2e,
	0x19, 0xb5, 0x5a, 0xcf, 0x4d, 0xa2, 0x49, 0xad, 0x89, 0x1a, 0x54, 0x88, 0xdb, 0xd0, 0xf4, 0x92,
	0xc4, 0x28, 0x57, 0x49, 0x79, 0x6b, 0x99, 0xf2, 0x4e, 0x92, 0x90, 0x62, 0xc3, 0x33, 0x1f, 0xa8,
	0x37, 0x89, 0xc7, 0x46, 0x6f, 0xf5, 0xed, 0x7a, 0xfb, 0xf1, 0xd8, 0xe8, 0x4d, 0xcc, 0x07, 0x7b,
	0x0a, 0xe0, 0x7b, 0xfe, 0xa9, 0x30, 0x9a, 0x37, 0x48, 0xf3, 0xde, 0x32, 0xcd, 0x5d, 0x94, 0x22,
	0xdd, 0x96, 0x9f, 0x7d, 0xf2, 0x3f, 0x43, 0xfb, 0x44, 0x26, 0x83, 0x28, 0x15, 0xea, 0xc2, 0x9b,
	0xb0, 0x2d, 0x68, 0x0d, 0xc5, 0x58, 0x46, 0xee, 0x85, 0x4c, 0x6c, 0x5e, 0x9b, 0x44, 0x38, 0x91,
	0x09, 0x96, 0x98, 0x88, 0x02, 0x62, 0x59, 0xdc, 0x11, 0x51, 0x80, 0x8c, 0xdb, 0x50, 0x9f, 0x88,
	0x68, 0x9c, 0x9e, 0xda, 0xbc, 0xd9, 0x15, 0x7f, 0x0a, 0xcd, 0xd7, 0x71, 0x20, 0x10, 0x56, 0xde,
	0x5e, 0x9f, 0x9b, 0xd0, 0x88, 0xe2, 0x40, 0x20, 0xc3, 0x5a, 0xc5, 0xe5, 0x20, 0xe0, 0xff, 0x5d,
	0x05, 0x76, 0x35, 0xd2, 0x78, 0xeb, 0xb2, 0xab, 0x53, 0xa8, 0xa9, 0xec, 0x76, 0x50, 0x31, 0xdd,
	0x87, 0xb5, 0x33, 0x21, 0x12, 0xd7, 0x9b, 0xc8, 0x0b, 0xe1, 0xa6, 0x32, 0x14, 0x14, 0x97, 0x9a,
	0xd3, 0x45, 0xf2, 0x0e, 0x52, 0xbf, 0x96, 0xa1, 0xc0, 0xd3, 0x06, 0xc2, 0x0b, 0x8c, 0x44, 0x8d,
	0x24, 0x9a, 0x48, 0x20, 0x26, 0x16, 0x79, 0xea, 0x0d, 0x27, 0xd6, 0x40, 0xdd, 0x54, 0xa4, 0x21,
	0x91, 0x40, 0xc1, 0x11, 0xba, 0xfe, 0x8d, 0x92, 0x23, 0x78, 0xfd, 0x17, 0xf0, 0xa5, 0x79, 0x3d,
	0xbe, 0xb4, 0x16, 0xf1, 0xe5, 0x11, 0xb4, 0x28, 0x32, 0x18, 0xa8, 0x3e, 0x50, 0x71, 0xff, 0xa8,
	0x94, 0xd8, 0x2c, 0xb8, 0x4e, 0x33, 0xca, 0xc2, 0xbc, 0x88, 0x49, 0x6d, 0x72, 0xbb, 0x88, 0x49,
	0xec, 0x31, 0x34, 0x65, 0x72, 0xf1, 0x84, 0xf2, 0xd8, 0x21, 0xab, 0xfd, 0x92, 0xd5, 0x42, 0x3d,
	0x38, 0x0d, 0x94, 0xc4, 0x14, 0x1b, 0xa5, 0x6d, 0x52, 0xea, 0xbe, 0x87, 0xd2, 0x36, 0x2a, 0xfd,
	0x14, 0x7a, 0xa1, 0x77, 0xe9, 0xfa, 0x71, 0x14, 0x09, 0x9f, 0x90, 0xbc, 0x47, 0x67, 0xec, 0x86,
	0xde, 0xe5, 0x6e, 0x4e, 0xe4, 0x2e, 0x74, 0x1c, 0xa1, 0xe3, 0xa9, 0xb2, 0x0e, 0xfe, 0x1c, 0x6e,
	0x2a, 0x6f, 0x92, 0xba, 0x23, 0x39, 0xc9, 0x82, 0xab, 0xed, 0xb3, 0xb2, 0x86, 0x8c, 0x17, 0x44,
	0x47, 0x51, 0xcd, 0x7e, 0x02, 0x5d, 0x39, 0x8e, 0x62, 0x25, 0x5c, 0x3d, 0x1d, 0x8e, 0xe4, 0x25,
	0xc1, 0x5b, 0xcb, 0xe9, 0x18, 0xe2, 0x31, 0xd1, 0xf8, 0x01, 0xac, 0xbf, 0x88, 0xd5, 0x50, 0x06,
	0x81, 0x88, 0x9e, 0xab, 0xf8, 0x5b, 0x2d, 0x14, 0x05, 0xca, 0x7c, 0x9a, 0x32, 0xaa, 0x58, 0xf0,
	0x36, 0x34, 0x2a, 0xa3, 0xdb, 0x50, 0x0f, 0xe2, 0xd0, 0x93, 0x91, 0x35, 0x6a, 0x57, 0xfc, 0x6f,
	0xab, 0xd0, 0x2b, 0xdf, 0x62, 0xc4, 0x22, 0x65, 0x8f, 0x60, 0xe2, 0x6e, 0x6e, 0x70, 0x19, 0x8b,
	0x8a, 0x87, 0x74, 0x3a, 0xaa, 0x78, 0xe4, 0xcf, 0x61, 0x83, 0x8e, 0xac, 0xc4, 0x48, 0x28, 0xa1,
	0xdc, 0x40, 0x8c, 0x3c, 0xc4, 0x41, 0x53, 0xb6, 0x0c, 0x79, 0x8e, 0x61, 0xed, 0x19, 0x0e, 0x7b,
	0x0c, 0xb7, 0x65, 0xa4, 0x85, 0x42, 0x9d, 0xf3, 0xa9, 0xd0, 0xa9, 0x7b, 0x21, 0x3d, 0x57, 0xa7,
	0xca, 0x3e, 0x43, 0xb7, 0x0c, 0xd7, 0x31, 0xcc, 0x13, 0xe9, 0x1d, 0xa7, 0x8a, 0xfd, 0x1a, 0x36,
	0x73, 0x25, 0x9d, 0xc4, 0x91, 0x16, 0xb9, 0x56, 0x9d, 0xb4, 0x36, 0x32, 0x2d, 0xc3, 0xb5, 0x6a,
	0xaf, 0xe0, 0xe6, 0x28, 0x8b, 0x9f, 0x6b, 0x23, 0xd4, 0x6f, 0x2c, 0x79, 0x47, 0x16, 0xa3, 0xec,
	0xac, 0x8f, 0x16, 0xe3, 0x3e, 0xf7, 0xfb, 0xd2, 0x1d, 0xc5, 0xea, 0x5b, 0x4f, 0x05, 0x22, 0xc0,
	0x2f, 0xba, 0x1e, 0xb5, 0xcc, 0xef, 0x3f, 0xbe, 0xc8, 0x78, 0x2f, 0x62, 0xc5, 0xee, 0x62, 0x33,
	0x14, 0x48, 0x25, 0xfc, 0xec, 0x9a, 0xe4, 0x6b, 0xfe, 0xef, 0x4a, 0x9e, 0x0d, 0x8b, 0x8d, 0xec,
	0x16, 0xd4, 0xa4, 0x76, 0xe3, 0xc8, 0xc2, 0xd1, 0x0d, 0xa9, 0x0f, 0x23, 0xc6, 0xa1, 0x4b, 0xb7,
	0x09, 0x41, 0x56, 0xcb, 0xef, 0x32, 0x48, 0x68, 0x23, 0x71, 0x3f, 0x1e, 0x1f, 0xcb, 0xef, 0x04,
	0x36, 0x5d, 0x52, 0xbb, 0x81, 0x18, 0x4e, 0xc7, 0x16, 0x0f, 0x1a, 0x52, 0xef, 0xe1, 0x12, 0xef,
	0x2a, 0xd1, 0x4d, 0x7a, 0x4d, 0xb4, 0x5a, 0x44, 0xa1, 0x04, 0x72, 0x2c, 0x80, 0x30, 0x4e, 0x8d,
	0x7d, 0x99, 0x64, 0x68, 0x60, 0x88, 0xe8, 0x58, 0x82, 0xb0, 0x54, 0x90, 0xa1, 0x3b, 0x6f, 0xce,
	0xdc, 0xcd, 0xa5, 0xf0, 0xde, 0xf3, 0x7f, 0x56, 0xf3, 0x26, 0x2b, 0xc7, 0x6c, 0xdc, 0x40, 0x6a,
	0xd7, 0x20, 0x7d, 0x9c, 0x88, 0xec, 0x6c, 0x6d, 0xa9, 0x49, 0xe6, 0x30, 0x11, 0x11, 0xfb, 0x15,
	0x6c, 0xa0, 0x4c, 0x1c, 0x9f, 0x49, 0x51, 0x14, 0x35, 0x27, 0xbd, 0x29, 0xf5, 0x2e, 0xb1, 0xe6,
	0x0a, 0x9f, 0x41, 0x4f, 0x79, 0xa1, 0x15, 0xa5, 0xa0, 0x98, 0x53, 0x77, 0x94, 0x17, 0x92, 0x14,
	0x45, 0x85, 0x43, 0xd7, 0x48, 0x04, 0x43, 0x23, 0x64, 0xb0, 0xb0, 0x4d, 0xc4, 0xbd, 0xe1, 0x15,
	0x99, 0xc4, 0x4b, 0x4f, 0x73, 0x34, 0x34, 0x32, 0x47, 0x5e, 0x7a, 0x8a, 0x70, 0x60, 0x77, 0x4a,
	0x95, 0x97, 0x8a, 0xf1, 0x2c, 0x3b, 0x3e, 0x51, 0x8f, 0x2d, 0x91, 0xfd, 0x0c, 0xd6, 0xb1, 0xa4,
	0xa5, 0x12, 0x81, 0x7b, 0x2a, 0xbc, 0x40, 0x28, 0x6d, 0x93, 0xbe, 0x96, 0xd1, 0x5f, 0x1a, 0x32,
	0xff, 0xd7, 0xfc, 0x09, 0x3f, 0x9a, 0x0e, 0x27, 0xd2, 0xa7, 0xe7, 0xed, 0x9d, 0xbd, 0x2e, 0x02,
	0x3f, 0x75, 0x1b, 0x94, 0x4b, 0xd3, 0x11, 0x36, 0x91, 0x40, 0xa9, 0x7c, 0x3e, 0x87, 0xd0, 0xc2,
	0x63, 0xfc, 0xce, 0x0e, 0x20, 0xc3, 0xd8, 0x2b, 0x4d, 0xc0, 0x8d, 0x0f, 0x6c, 0x02, 0x6a, 0x1f,
	0xdc, 0x04, 0xd4, 0x7f, 0x60, 0x13, 0xf0, 0x97, 0x4a, 0xd6, 0x5c, 0xbd, 0xd1, 0xde, 0x98, 0x9a,
	0xab, 0x2d, 0x68, 0xf9, 0xc9, 0xd4, 0x9d, 0xe2, 0x3a, 0x6b, 0x04, 0xfc, 0x64, 0x4a, 0x7c, 0x64,
	0x86, 0x22, 0xb4, 0x4c, 0xf3, 0xfe, 0x36, 0x43, 0x11, 0x1a, 0x26, 0x5e, 0x14, 0xa9, 0xcf, 0x2c,
	0xd7, 0xf6, 0xd4, 0x48, 0xc9, 0xd9, 0x78, 0x37, 0x47, 0xa3, 0x89, 0x8c, 0xb2, 0x3b, 0xd8, 0x92,
	0xfa, 0xd0, 0x10, 0xf8, 0x36, 0xb4, 0x0f, 0xbc, 0xc8, 0x1b, 0x8b, 0xc1, 0x91, 0xed, 0x6a, 0xa5,
	0x76, 0xf1, 0x11, 0xb2, 0x43, 0x50, 0x5d, 0xea, 0x41, 0x72, 0xf1, 0x84, 0xf5, 0xa0, 0x9a, 0xb7,
	0x21, 0x55, 0x99, 0xf0, 0x1d, 0x68, 0x0f, 0xf4, 0x97, 0x97, 0x34, 0x91, 0xe8, 0xc4, 0x5e, 0x64,
	0x81, 0xeb, 0x6c, 0x7a, 0x92, 0x86, 0x5d, 0x6c, 0x44, 0xaa, 0xa5, 0xd1, 0xe6, 0x3e, 0xb4, 0x4d,
	0x10, 0x96, 0x8c, 0x40, 0xab, 0x05, 0xb9, 0xbf, 0x57, 0xa0, 0x6e, 0x04, 0xdf, 0xde, 0xd4, 0x6c,
	0x41, 0x8b, 0x18, 0x85, 0x0e, 0xa5, 0x89, 0x84, 0xac, 0xd7, 0x0d, 0x48, 0x7f, 0xfe, 0x54, 0xb4,
	0x1c, 0x30, 0x24, 0xaa, 0xc0, 0x2d, 0x68, 0xd1, 0x0b, 0x4d, 0x5d, 0x83, 0x19, 0x3b, 0xe8, 0xc9,
	0xa6, 0xa6, 0xc1, 0x30, 0xb7, 0x0d, 0xb3, 0x96, 0x33, 0xb7, 0x91, 0xc9, 0x7f, 0x0b, 0x60, 0x5c,
	0xd3, 0x98, 0xc4, 0x5f, 0x40, 0xdd, 0x58, 0xb5, 0xad, 0xf1, 0xad, 0x52, 0x45, 0x18, 0x41, 0xc7,
	0x8a, 0xf0, 0x3d, 0x80, 0x37, 0x5a, 0x04, 0x27, 0x4b, 0x03, 0xdf, 0xcc, 0x03, 0x5f, 0xbe, 0x59,
	0xd5, 0xc5, 0x29, 0xf2, 0x1b, 0x68, 0x9f, 0x0c, 0x8e, 0x76, 0xe3, 0x69, 0x94, 0xa2, 0x07, 0xf7,
	0x61, 0x6d, 0xaa, 0x05, 0xf5, 0x8c, 0x4f, 0x5c, 0x1f, 0xa9, 0x36, 0x1d, 0x5d, 0x24, 0x9f, 0xc8,
	0xe4, 0x09, 0x89, 0x16, 0xe5, 0xb6, 0xad, 0x5c, 0xb5, 0x24, 0xb7, 0x4d, 0x72, 0xfc, 0x23, 0x80,
	0x93, 0xc1, 0x11, 0x0d, 0x9e, 0x3a, 0x61, 0xeb, 0xb0, 0x6a, 0xfa, 0x54, 0x4c, 0x0f, 0x7e, 0xf2,
	0x57, 0x00, 0xb6, 0xe3, 0x3f, 0xd0, 0x63, 0xac, 0x82, 0x33, 0x31, 0x2b, 0xbe, 0xef, 0x8d, 0x33,
	0x31, 0xa3, 0x1c, 0x60, 0xf3, 0x76, 0x75, 0x32, 0x69, 0xfb, 0xf3, 0x91, 0x84, 0xef, 0x42, 0xcf,
	0xda, 0xca, 0xf6, 0xfb, 0x02, 0x1a, 0x76, 0x82, 0xb0, 0x01, 0xdd, 0x5c, 0x36, 0x6b, 0xe0, 0xf8,
	0x9d, 0xc9, 0xf1, 0x6f, 0x00, 0xe6, 0xed, 0x0a, 0x55, 0x6d, 0x56, 0x2a, 0x55, 0x19, 0x20, 0x22,
	0xda, 0x26, 0xc7, 0x8f, 0xa3, 0x54, 0xd8, 0x53, 0xb7, 0x9c, 0xae, 0xa1, 0xee, 0x1a, 0x22, 0xeb,
	0x43, 0xc3, 0x8f, 0xc3, 0x10, 0xf9, 0xa6, 0x58, 0xb2, 0x25, 0x3f, 0x80, 0x9b, 0x4e, 0xa9, 0x23,
	0x42, 0x37, 0x7f, 0x03, 0xed, 0x42, 0xeb, 0xb4, 0xd4, 0xd5, 0x82, 0x02, 0x8c, 0xf2, 0x6f, 0xfe,
	0xd7, 0xca, 0x15, 0x7b, 0xff, 0x27, 0x98, 0x2e, 0xf8, 0x62, 0xb0, 0xf4, 0x7d, 0x7c, 0x79, 0xf4,
	0x9f, 0x46, 0xfe, 0xae, 0x1b, 0x44, 0x50, 0xec, 0x25, 0xf4, 0xb4, 0x48, 0x0b, 0x63, 0x20, 0xdb,
	0x5a, 0x52, 0xd1, 0xd9, 0x48, 0x7c, 0xb7, 0xbc, 0xcd, 0xfc, 0xdf, 0x0a, 0x5f, 0x61, 0xbf, 0x87,
	0xde, 0xb8, 0x6c, 0xe9, 0x76, 0x49, 0x38, 0xff, 0x13, 0x72, 0xf7, 0xed, 0x3b, 0xe8, 0x84, 0xaf,
	0xb0, 0x43, 0xe8, 0x9e, 0xab, 0xd9, 0x7c, 0x54, 0x67, 0x77, 0x96, 0xa1, 0xae, 0x31, 0xf5, 0xe9,
	0x32, 0x56, 0x69, 0xf4, 0xe4, 0x2b, 0xec, 0x15, 0x80, 0x16, 0x69, 0x66, 0x6d, 0xa9, 0x4a, 0xe9,
	0xa9, 0xbb, 0xee, 0x94, 0x7f, 0x82, 0x8d, 0x73, 0x35, 0xbb, 0xf2, 0x03, 0x82, 0xdd, 0x5b, 0xee,
	0xa3, 0xfd, 0x9f, 0xb3, 0xdc, 0xcf, 0xd2, 0xff, 0x8b, 0x85, 0x08, 0x1a, 0x64, 0xff, 0x21, 0x11,
	0xcc, 0xde, 0x19, 0xbe, 0xc2, 0xbe, 0xc4, 0xc6, 0x86, 0xa0, 0xd9, 0x82, 0x6a, 0x79, 0xb0, 0x28,
	0xbc, 0x06, 0x77, 0xcb, 0x9c, 0x02, 0xde, 0xf3, 0x15, 0xb6, 0x03, 0x90, 0xfb, 0xa3, 0x17, 0x6c,
	0x14, 0x60, 0x7d, 0x21, 0x5c, 0x73, 0xb0, 0xe4, 0x2b, 0xec, 0x25, 0xac, 0x9d, 0xab, 0x99, 0x05,
	0x41, 0x83, 0x4b, 0xd7, 0x64, 0x73, 0x61, 0xfe, 0x99, 0x83, 0x1e, 0x5f, 0x61, 0xcf, 0x00, 0xe6,
	0x96, 0x58, 0x79, 0xcb, 0x39, 0xc8, 0x2e, 0xf8, 0x32, 0x07, 0x36, 0x13, 0xde, 0x73, 0x35, 0x2b,
	0xe0, 0xcf, 0x7b, 0x86, 0xb7, 0x8c, 0x58, 0x7c, 0x85, 0x1d, 0x90, 0xa1, 0xe2, 0xc8, 0x74, 0xcd,
	0x99, 0x3e, 0x2a, 0xcf, 0x2b, 0x8b, 0xc8, 0xc2, 0x57, 0xd8, 0x57, 0x74, 0x05, 0x8b, 0xe6, 0xae,
	0xd5, 0xb9, 0xb6, 0x3e, 0x87, 0x75, 0xfa, 0x0b, 0xfa, 0xf8, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x6e, 0x39, 0xdc, 0x4f, 0x16, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterManagerClient is the client API for ClusterManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterManagerClient interface {
	SetDeviceState(ctx context.Context, in *DeviceStateReq, opts ...grpc.CallOption) (*OperResult, error)
	GetDeviceState(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*DeviceStateRsp, error)
	QryOneCluster(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*ClusterDetailInfoRsp, error)
	SetCluster(ctx context.Context, in *ClusterPublicInfoReq, opts ...grpc.CallOption) (*OperResult, error)
	QryClusterSimpleInfo(ctx context.Context, in *ClusterIDListReq, opts ...grpc.CallOption) (*ClusterSimpleInfoRsp, error)
	GetDeviceUsage(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*DeviceUsageRsp, error)
	IsExistDevice(ctx context.Context, in *ManageIPReq, opts ...grpc.CallOption) (*IsExistResp, error)
	GetDevices(ctx context.Context, in *DeviceIDReq, opts ...grpc.CallOption) (*DevicesRsp, error)
	QryUsedVIPCount(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*VIPCountRsp, error)
	QryUsedVIP(ctx context.Context, in *UsedVIPReq, opts ...grpc.CallOption) (*VIPListRsp, error)
	QryServiceList(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*ServiceListRsp, error)
	QryFilterTypes(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*RaltFilterTypeRsp, error)
	SetFilterTypes(ctx context.Context, in *RaltFilterTypeReq, opts ...grpc.CallOption) (*OperResult, error)
}

type clusterManagerClient struct {
	cc *grpc.ClientConn
}

func NewClusterManagerClient(cc *grpc.ClientConn) ClusterManagerClient {
	return &clusterManagerClient{cc}
}

func (c *clusterManagerClient) SetDeviceState(ctx context.Context, in *DeviceStateReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/setDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetDeviceState(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*DeviceStateRsp, error) {
	out := new(DeviceStateRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/getDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryOneCluster(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*ClusterDetailInfoRsp, error) {
	out := new(ClusterDetailInfoRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryOneCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) SetCluster(ctx context.Context, in *ClusterPublicInfoReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/setCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryClusterSimpleInfo(ctx context.Context, in *ClusterIDListReq, opts ...grpc.CallOption) (*ClusterSimpleInfoRsp, error) {
	out := new(ClusterSimpleInfoRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryClusterSimpleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetDeviceUsage(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*DeviceUsageRsp, error) {
	out := new(DeviceUsageRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/getDeviceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) IsExistDevice(ctx context.Context, in *ManageIPReq, opts ...grpc.CallOption) (*IsExistResp, error) {
	out := new(IsExistResp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/isExistDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetDevices(ctx context.Context, in *DeviceIDReq, opts ...grpc.CallOption) (*DevicesRsp, error) {
	out := new(DevicesRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/getDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryUsedVIPCount(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*VIPCountRsp, error) {
	out := new(VIPCountRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryUsedVIPCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryUsedVIP(ctx context.Context, in *UsedVIPReq, opts ...grpc.CallOption) (*VIPListRsp, error) {
	out := new(VIPListRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryUsedVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryServiceList(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*ServiceListRsp, error) {
	out := new(ServiceListRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryServiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryFilterTypes(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*RaltFilterTypeRsp, error) {
	out := new(RaltFilterTypeRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryFilterTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) SetFilterTypes(ctx context.Context, in *RaltFilterTypeReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/setFilterTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagerServer is the server API for ClusterManager service.
type ClusterManagerServer interface {
	SetDeviceState(context.Context, *DeviceStateReq) (*OperResult, error)
	GetDeviceState(context.Context, *HostIDReq) (*DeviceStateRsp, error)
	QryOneCluster(context.Context, *ClusterIDReq) (*ClusterDetailInfoRsp, error)
	SetCluster(context.Context, *ClusterPublicInfoReq) (*OperResult, error)
	QryClusterSimpleInfo(context.Context, *ClusterIDListReq) (*ClusterSimpleInfoRsp, error)
	GetDeviceUsage(context.Context, *HostIDReq) (*DeviceUsageRsp, error)
	IsExistDevice(context.Context, *ManageIPReq) (*IsExistResp, error)
	GetDevices(context.Context, *DeviceIDReq) (*DevicesRsp, error)
	QryUsedVIPCount(context.Context, *ClusterIDReq) (*VIPCountRsp, error)
	QryUsedVIP(context.Context, *UsedVIPReq) (*VIPListRsp, error)
	QryServiceList(context.Context, *HostIDReq) (*ServiceListRsp, error)
	QryFilterTypes(context.Context, *ClusterIDReq) (*RaltFilterTypeRsp, error)
	SetFilterTypes(context.Context, *RaltFilterTypeReq) (*OperResult, error)
}

// UnimplementedClusterManagerServer can be embedded to have forward compatible implementations.
type UnimplementedClusterManagerServer struct {
}

func (*UnimplementedClusterManagerServer) SetDeviceState(ctx context.Context, req *DeviceStateReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceState not implemented")
}
func (*UnimplementedClusterManagerServer) GetDeviceState(ctx context.Context, req *HostIDReq) (*DeviceStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceState not implemented")
}
func (*UnimplementedClusterManagerServer) QryOneCluster(ctx context.Context, req *ClusterIDReq) (*ClusterDetailInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryOneCluster not implemented")
}
func (*UnimplementedClusterManagerServer) SetCluster(ctx context.Context, req *ClusterPublicInfoReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCluster not implemented")
}
func (*UnimplementedClusterManagerServer) QryClusterSimpleInfo(ctx context.Context, req *ClusterIDListReq) (*ClusterSimpleInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryClusterSimpleInfo not implemented")
}
func (*UnimplementedClusterManagerServer) GetDeviceUsage(ctx context.Context, req *HostIDReq) (*DeviceUsageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceUsage not implemented")
}
func (*UnimplementedClusterManagerServer) IsExistDevice(ctx context.Context, req *ManageIPReq) (*IsExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistDevice not implemented")
}
func (*UnimplementedClusterManagerServer) GetDevices(ctx context.Context, req *DeviceIDReq) (*DevicesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (*UnimplementedClusterManagerServer) QryUsedVIPCount(ctx context.Context, req *ClusterIDReq) (*VIPCountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryUsedVIPCount not implemented")
}
func (*UnimplementedClusterManagerServer) QryUsedVIP(ctx context.Context, req *UsedVIPReq) (*VIPListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryUsedVIP not implemented")
}
func (*UnimplementedClusterManagerServer) QryServiceList(ctx context.Context, req *HostIDReq) (*ServiceListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryServiceList not implemented")
}
func (*UnimplementedClusterManagerServer) QryFilterTypes(ctx context.Context, req *ClusterIDReq) (*RaltFilterTypeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryFilterTypes not implemented")
}
func (*UnimplementedClusterManagerServer) SetFilterTypes(ctx context.Context, req *RaltFilterTypeReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFilterTypes not implemented")
}

func RegisterClusterManagerServer(s *grpc.Server, srv ClusterManagerServer) {
	s.RegisterService(&_ClusterManager_serviceDesc, srv)
}

func _ClusterManager_SetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/SetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SetDeviceState(ctx, req.(*DeviceStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/GetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetDeviceState(ctx, req.(*HostIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryOneCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryOneCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryOneCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryOneCluster(ctx, req.(*ClusterIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_SetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterPublicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/SetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SetCluster(ctx, req.(*ClusterPublicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryClusterSimpleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIDListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryClusterSimpleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryClusterSimpleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryClusterSimpleInfo(ctx, req.(*ClusterIDListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetDeviceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetDeviceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/GetDeviceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetDeviceUsage(ctx, req.(*HostIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_IsExistDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).IsExistDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/IsExistDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).IsExistDevice(ctx, req.(*ManageIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetDevices(ctx, req.(*DeviceIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryUsedVIPCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryUsedVIPCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryUsedVIPCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryUsedVIPCount(ctx, req.(*ClusterIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryUsedVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsedVIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryUsedVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryUsedVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryUsedVIP(ctx, req.(*UsedVIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryServiceList(ctx, req.(*HostIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryFilterTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryFilterTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryFilterTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryFilterTypes(ctx, req.(*ClusterIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_SetFilterTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaltFilterTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SetFilterTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/SetFilterTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SetFilterTypes(ctx, req.(*RaltFilterTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ate_cluster.ClusterManager",
	HandlerType: (*ClusterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setDeviceState",
			Handler:    _ClusterManager_SetDeviceState_Handler,
		},
		{
			MethodName: "getDeviceState",
			Handler:    _ClusterManager_GetDeviceState_Handler,
		},
		{
			MethodName: "qryOneCluster",
			Handler:    _ClusterManager_QryOneCluster_Handler,
		},
		{
			MethodName: "setCluster",
			Handler:    _ClusterManager_SetCluster_Handler,
		},
		{
			MethodName: "qryClusterSimpleInfo",
			Handler:    _ClusterManager_QryClusterSimpleInfo_Handler,
		},
		{
			MethodName: "getDeviceUsage",
			Handler:    _ClusterManager_GetDeviceUsage_Handler,
		},
		{
			MethodName: "isExistDevice",
			Handler:    _ClusterManager_IsExistDevice_Handler,
		},
		{
			MethodName: "getDevices",
			Handler:    _ClusterManager_GetDevices_Handler,
		},
		{
			MethodName: "qryUsedVIPCount",
			Handler:    _ClusterManager_QryUsedVIPCount_Handler,
		},
		{
			MethodName: "qryUsedVIP",
			Handler:    _ClusterManager_QryUsedVIP_Handler,
		},
		{
			MethodName: "qryServiceList",
			Handler:    _ClusterManager_QryServiceList_Handler,
		},
		{
			MethodName: "qryFilterTypes",
			Handler:    _ClusterManager_QryFilterTypes_Handler,
		},
		{
			MethodName: "setFilterTypes",
			Handler:    _ClusterManager_SetFilterTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
