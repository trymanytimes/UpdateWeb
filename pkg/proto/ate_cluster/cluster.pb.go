// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.0
// source: cluster.proto

package ate_cluster

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OperResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` //操作结果, 0成功, 错误码:100~199属于业务错误, 200~299属于集群错误, 300~399属于日志,统计 错误.
	RetMsg  string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`     //相关信息, 英文描述.
}

func (x *OperResult) Reset() {
	*x = OperResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperResult) ProtoMessage() {}

func (x *OperResult) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperResult.ProtoReflect.Descriptor instead.
func (*OperResult) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *OperResult) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *OperResult) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

type NULLMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NULLMsgReq) Reset() {
	*x = NULLMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NULLMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NULLMsgReq) ProtoMessage() {}

func (x *NULLMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NULLMsgReq.ProtoReflect.Descriptor instead.
func (*NULLMsgReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{1}
}

type ClusterIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"` //集群编号
}

func (x *ClusterIDReq) Reset() {
	*x = ClusterIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterIDReq) ProtoMessage() {}

func (x *ClusterIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterIDReq.ProtoReflect.Descriptor instead.
func (*ClusterIDReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterIDReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type HostIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"` //设备编号
}

func (x *HostIDReq) Reset() {
	*x = HostIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostIDReq) ProtoMessage() {}

func (x *HostIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostIDReq.ProtoReflect.Descriptor instead.
func (*HostIDReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *HostIDReq) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type ClusterIDListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId []string `protobuf:"bytes,1,rep,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"` //集群编号
}

func (x *ClusterIDListReq) Reset() {
	*x = ClusterIDListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterIDListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterIDListReq) ProtoMessage() {}

func (x *ClusterIDListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterIDListReq.ProtoReflect.Descriptor instead.
func (*ClusterIDListReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterIDListReq) GetClusterId() []string {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

type ServiceOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceKey string `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"` //服务关键字
	Operation  int32  `protobuf:"varint,2,opt,name=operation,proto3" json:"operation,omitempty"`                    //1启动, 2关闭, 3重启.
}

func (x *ServiceOperation) Reset() {
	*x = ServiceOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceOperation) ProtoMessage() {}

func (x *ServiceOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceOperation.ProtoReflect.Descriptor instead.
func (*ServiceOperation) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceOperation) GetServiceKey() string {
	if x != nil {
		return x.ServiceKey
	}
	return ""
}

func (x *ServiceOperation) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

type OneClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	State       int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`                               //1重启中,2启动,3停用
	MultiAddr   string `protobuf:"bytes,3,opt,name=multi_addr,json=multiAddr,proto3" json:"multi_addr,omitempty"`       //IPv4组播地址
	MultiPort   string `protobuf:"bytes,4,opt,name=multi_port,json=multiPort,proto3" json:"multi_port,omitempty"`       //IPv6组播地址
	BalanceType string `protobuf:"bytes,5,opt,name=balance_type,json=balanceType,proto3" json:"balance_type,omitempty"` //负载均衡方式 1表示哈希, 2表示轮询, 3表示自转发.
}

func (x *OneClusterInfo) Reset() {
	*x = OneClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneClusterInfo) ProtoMessage() {}

func (x *OneClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneClusterInfo.ProtoReflect.Descriptor instead.
func (*OneClusterInfo) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *OneClusterInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *OneClusterInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *OneClusterInfo) GetMultiAddr() string {
	if x != nil {
		return x.MultiAddr
	}
	return ""
}

func (x *OneClusterInfo) GetMultiPort() string {
	if x != nil {
		return x.MultiPort
	}
	return ""
}

func (x *OneClusterInfo) GetBalanceType() string {
	if x != nil {
		return x.BalanceType
	}
	return ""
}

type ClusterSimpleInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterInfo []*OneClusterInfo `protobuf:"bytes,1,rep,name=cluster_info,json=clusterInfo,proto3" json:"cluster_info,omitempty"`
}

func (x *ClusterSimpleInfoRsp) Reset() {
	*x = ClusterSimpleInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSimpleInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSimpleInfoRsp) ProtoMessage() {}

func (x *ClusterSimpleInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSimpleInfoRsp.ProtoReflect.Descriptor instead.
func (*ClusterSimpleInfoRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterSimpleInfoRsp) GetClusterInfo() []*OneClusterInfo {
	if x != nil {
		return x.ClusterInfo
	}
	return nil
}

type DeviceStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId      string              `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`                //设备id
	ServiceOper []*ServiceOperation `protobuf:"bytes,2,rep,name=service_oper,json=serviceOper,proto3" json:"service_oper,omitempty"` //服务操作. 当该项不传,表示对所有的服务进行重启.
}

func (x *DeviceStateReq) Reset() {
	*x = DeviceStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateReq) ProtoMessage() {}

func (x *DeviceStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateReq.ProtoReflect.Descriptor instead.
func (*DeviceStateReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceStateReq) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DeviceStateReq) GetServiceOper() []*ServiceOperation {
	if x != nil {
		return x.ServiceOper
	}
	return nil
}

type ServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceKey         string `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`                           //服务的关键字
	ServiceChineseName string `protobuf:"bytes,2,opt,name=service_chinese_name,json=serviceChineseName,proto3" json:"service_chinese_name,omitempty"` //服务中文名字
	OperResult         int32  `protobuf:"varint,3,opt,name=oper_result,json=operResult,proto3" json:"oper_result,omitempty"`                          //服务状态:1启用, 2停用
}

func (x *ServiceState) Reset() {
	*x = ServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceState) ProtoMessage() {}

func (x *ServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceState.ProtoReflect.Descriptor instead.
func (*ServiceState) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceState) GetServiceKey() string {
	if x != nil {
		return x.ServiceKey
	}
	return ""
}

func (x *ServiceState) GetServiceChineseName() string {
	if x != nil {
		return x.ServiceChineseName
	}
	return ""
}

func (x *ServiceState) GetOperResult() int32 {
	if x != nil {
		return x.OperResult
	}
	return 0
}

type DeviceStateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceState []*ServiceState `protobuf:"bytes,1,rep,name=service_state,json=serviceState,proto3" json:"service_state,omitempty"`
}

func (x *DeviceStateRsp) Reset() {
	*x = DeviceStateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateRsp) ProtoMessage() {}

func (x *DeviceStateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateRsp.ProtoReflect.Descriptor instead.
func (*DeviceStateRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *DeviceStateRsp) GetServiceState() []*ServiceState {
	if x != nil {
		return x.ServiceState
	}
	return nil
}

type ClusterDetailInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocsInfo  *ClusterBalanceInfo `protobuf:"bytes,1,opt,name=socs_info,json=socsInfo,proto3" json:"socs_info,omitempty"`
	AppInfo   *ClusterAppInfo     `protobuf:"bytes,2,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
	LogInfo   *ClusterLogInfo     `protobuf:"bytes,3,opt,name=log_info,json=logInfo,proto3" json:"log_info,omitempty"`
	CacheInfo *ClusterCacheInfo   `protobuf:"bytes,4,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *ClusterDetailInfoRsp) Reset() {
	*x = ClusterDetailInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDetailInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDetailInfoRsp) ProtoMessage() {}

func (x *ClusterDetailInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDetailInfoRsp.ProtoReflect.Descriptor instead.
func (*ClusterDetailInfoRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *ClusterDetailInfoRsp) GetSocsInfo() *ClusterBalanceInfo {
	if x != nil {
		return x.SocsInfo
	}
	return nil
}

func (x *ClusterDetailInfoRsp) GetAppInfo() *ClusterAppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *ClusterDetailInfoRsp) GetLogInfo() *ClusterLogInfo {
	if x != nil {
		return x.LogInfo
	}
	return nil
}

func (x *ClusterDetailInfoRsp) GetCacheInfo() *ClusterCacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type VipInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginVip string `protobuf:"bytes,1,opt,name=begin_vip,json=beginVip,proto3" json:"begin_vip,omitempty"` //IP 开始地址
	EndVip   string `protobuf:"bytes,2,opt,name=end_vip,json=endVip,proto3" json:"end_vip,omitempty"`       //IP 结束地址
	Length   int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`                    //网段长度
}

func (x *VipInterval) Reset() {
	*x = VipInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipInterval) ProtoMessage() {}

func (x *VipInterval) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipInterval.ProtoReflect.Descriptor instead.
func (*VipInterval) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *VipInterval) GetBeginVip() string {
	if x != nil {
		return x.BeginVip
	}
	return ""
}

func (x *VipInterval) GetEndVip() string {
	if x != nil {
		return x.EndVip
	}
	return ""
}

func (x *VipInterval) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type NodeHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *NodeHost) Reset() {
	*x = NodeHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHost) ProtoMessage() {}

func (x *NodeHost) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHost.ProtoReflect.Descriptor instead.
func (*NodeHost) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *NodeHost) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *NodeHost) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type ClusterBalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string         `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`          //集群域
	KeepAliveTime int32          `protobuf:"varint,4,opt,name=keep_alive_time,json=keepAliveTime,proto3" json:"keep_alive_time,omitempty"` //心跳时间
	DeadTime      int32          `protobuf:"varint,5,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`                  //宕机时间
	StableTime    int32          `protobuf:"varint,6,opt,name=stable_time,json=stableTime,proto3" json:"stable_time,omitempty"`            //选举前等待时间
	ClusterType   string         `protobuf:"bytes,7,opt,name=cluster_type,json=clusterType,proto3" json:"cluster_type,omitempty"`          //集群类型 如6ATE,6EAG
	MultiAddr     string         `protobuf:"bytes,8,opt,name=multi_addr,json=multiAddr,proto3" json:"multi_addr,omitempty"`                //IPv4或者IPv6组播地址
	MultiPort     string         `protobuf:"bytes,9,opt,name=multi_port,json=multiPort,proto3" json:"multi_port,omitempty"`                //组播地址的端口
	NodeHost      []*NodeHost    `protobuf:"bytes,10,rep,name=node_host,json=nodeHost,proto3" json:"node_host,omitempty"`                  //设备列表(可选),和新建的时候不一样, 因为新建的时候需要关联host_id,所以用host_name.
	BalanceType   int32          `protobuf:"varint,11,opt,name=balance_type,json=balanceType,proto3" json:"balance_type,omitempty"`        //负载策略 1表示哈希, 2表示轮询, 3表示自转发.
	Ipv4Vip       []*VipInterval `protobuf:"bytes,12,rep,name=ipv4_vip,json=ipv4Vip,proto3" json:"ipv4_vip,omitempty"`                     //IPv4 列表
	Ipv6Vip       []*VipInterval `protobuf:"bytes,13,rep,name=ipv6_vip,json=ipv6Vip,proto3" json:"ipv6_vip,omitempty"`                     //IPv6 列表
	MaxConnection string         `protobuf:"bytes,14,opt,name=max_connection,json=maxConnection,proto3" json:"max_connection,omitempty"`   //最大会话数
}

func (x *ClusterBalanceInfo) Reset() {
	*x = ClusterBalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterBalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterBalanceInfo) ProtoMessage() {}

func (x *ClusterBalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterBalanceInfo.ProtoReflect.Descriptor instead.
func (*ClusterBalanceInfo) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterBalanceInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterBalanceInfo) GetKeepAliveTime() int32 {
	if x != nil {
		return x.KeepAliveTime
	}
	return 0
}

func (x *ClusterBalanceInfo) GetDeadTime() int32 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *ClusterBalanceInfo) GetStableTime() int32 {
	if x != nil {
		return x.StableTime
	}
	return 0
}

func (x *ClusterBalanceInfo) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *ClusterBalanceInfo) GetMultiAddr() string {
	if x != nil {
		return x.MultiAddr
	}
	return ""
}

func (x *ClusterBalanceInfo) GetMultiPort() string {
	if x != nil {
		return x.MultiPort
	}
	return ""
}

func (x *ClusterBalanceInfo) GetNodeHost() []*NodeHost {
	if x != nil {
		return x.NodeHost
	}
	return nil
}

func (x *ClusterBalanceInfo) GetBalanceType() int32 {
	if x != nil {
		return x.BalanceType
	}
	return 0
}

func (x *ClusterBalanceInfo) GetIpv4Vip() []*VipInterval {
	if x != nil {
		return x.Ipv4Vip
	}
	return nil
}

func (x *ClusterBalanceInfo) GetIpv6Vip() []*VipInterval {
	if x != nil {
		return x.Ipv6Vip
	}
	return nil
}

func (x *ClusterBalanceInfo) GetMaxConnection() string {
	if x != nil {
		return x.MaxConnection
	}
	return ""
}

type ResourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaltFilterTypes []string `protobuf:"bytes,1,rep,name=ralt_filter_types,json=raltFilterTypes,proto3" json:"ralt_filter_types,omitempty"` //将会升级的http响应报文类型, 如text/html; 如text/css text/xml text/plain;如text/javascript text/js等.
	IgnoreSubfix    []string `protobuf:"bytes,2,rep,name=ignore_subfix,json=ignoreSubfix,proto3" json:"ignore_subfix,omitempty"`            //将不升级的url资源后缀, 如mp3
}

func (x *ResourceType) Reset() {
	*x = ResourceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceType) ProtoMessage() {}

func (x *ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceType.ProtoReflect.Descriptor instead.
func (*ResourceType) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *ResourceType) GetRaltFilterTypes() []string {
	if x != nil {
		return x.RaltFilterTypes
	}
	return nil
}

func (x *ResourceType) GetIgnoreSubfix() []string {
	if x != nil {
		return x.IgnoreSubfix
	}
	return nil
}

type ForbiddenBrowser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrowserName string   `protobuf:"bytes,1,opt,name=browser_name,json=browserName,proto3" json:"browser_name,omitempty"` //浏览器名称
	Domain      []string `protobuf:"bytes,2,rep,name=domain,proto3" json:"domain,omitempty"`                              //禁止的相关域名.
}

func (x *ForbiddenBrowser) Reset() {
	*x = ForbiddenBrowser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbiddenBrowser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbiddenBrowser) ProtoMessage() {}

func (x *ForbiddenBrowser) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbiddenBrowser.ProtoReflect.Descriptor instead.
func (*ForbiddenBrowser) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *ForbiddenBrowser) GetBrowserName() string {
	if x != nil {
		return x.BrowserName
	}
	return ""
}

func (x *ForbiddenBrowser) GetDomain() []string {
	if x != nil {
		return x.Domain
	}
	return nil
}

type ClusterAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType         *ResourceType       `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`                             //升级资源类型,
	RaltRefererDefault   int32               `protobuf:"varint,4,opt,name=ralt_referer_default,json=raltRefererDefault,proto3" json:"ralt_referer_default,omitempty"`        //防盗链开关, 1开启, 2关闭.
	InsertRequestViaStr  string              `protobuf:"bytes,5,opt,name=insert_request_via_str,json=insertRequestViaStr,proto3" json:"insert_request_via_str,omitempty"`    //请求头via设置, 没有值表示不添加内容; 有值表示添加所填写内容.
	InsertResponseViaStr string              `protobuf:"bytes,6,opt,name=insert_response_via_str,json=insertResponseViaStr,proto3" json:"insert_response_via_str,omitempty"` //响应头via设置, 没有值表示不添加内容; 有值表示添加所填写内容.
	ForbiddenBrowser     []*ForbiddenBrowser `protobuf:"bytes,7,rep,name=forbidden_browser,json=forbiddenBrowser,proto3" json:"forbidden_browser,omitempty"`                 //禁止特定浏览器访问
	InsertXForwardedFor  int32               `protobuf:"varint,8,opt,name=insert_x_forwarded_for,json=insertXForwardedFor,proto3" json:"insert_x_forwarded_for,omitempty"`   //请求头X-Forwarded-For设置, 1表示不修改, 2表示插入回源请求报文头客户的IP.
	Redirect             string              `protobuf:"bytes,9,opt,name=redirect,proto3" json:"redirect,omitempty"`                                                         //301,302重定向时是否增加令牌开关, on表示开启, off表示关闭.
}

func (x *ClusterAppInfo) Reset() {
	*x = ClusterAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAppInfo) ProtoMessage() {}

func (x *ClusterAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAppInfo.ProtoReflect.Descriptor instead.
func (*ClusterAppInfo) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *ClusterAppInfo) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *ClusterAppInfo) GetRaltRefererDefault() int32 {
	if x != nil {
		return x.RaltRefererDefault
	}
	return 0
}

func (x *ClusterAppInfo) GetInsertRequestViaStr() string {
	if x != nil {
		return x.InsertRequestViaStr
	}
	return ""
}

func (x *ClusterAppInfo) GetInsertResponseViaStr() string {
	if x != nil {
		return x.InsertResponseViaStr
	}
	return ""
}

func (x *ClusterAppInfo) GetForbiddenBrowser() []*ForbiddenBrowser {
	if x != nil {
		return x.ForbiddenBrowser
	}
	return nil
}

func (x *ClusterAppInfo) GetInsertXForwardedFor() int32 {
	if x != nil {
		return x.InsertXForwardedFor
	}
	return 0
}

func (x *ClusterAppInfo) GetRedirect() string {
	if x != nil {
		return x.Redirect
	}
	return ""
}

type ClusterLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOn          int32  `protobuf:"varint,3,opt,name=is_on,json=isOn,proto3" json:"is_on,omitempty"`                              //日志开关 1表示开启, 2表示关闭.
	NodeLogSize   int32  `protobuf:"varint,4,opt,name=node_log_size,json=nodeLogSize,proto3" json:"node_log_size,omitempty"`       //单设备日志容量(M)
	IsDebug       int32  `protobuf:"varint,5,opt,name=is_debug,json=isDebug,proto3" json:"is_debug,omitempty"`                     //DEBUG模式是否开启, 1开启, 2关闭.
	DebugType     string `protobuf:"bytes,6,opt,name=debug_type,json=debugType,proto3" json:"debug_type,omitempty"`                //DEBUG日志类型, 如ralt, http, ralt|http.
	RemoteLogIp   string `protobuf:"bytes,7,opt,name=remote_log_ip,json=remoteLogIp,proto3" json:"remote_log_ip,omitempty"`        //日志服务器（SYSLOG）IP
	RemoteLogPort int32  `protobuf:"varint,8,opt,name=remote_log_port,json=remoteLogPort,proto3" json:"remote_log_port,omitempty"` //对应端口
}

func (x *ClusterLogInfo) Reset() {
	*x = ClusterLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterLogInfo) ProtoMessage() {}

func (x *ClusterLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterLogInfo.ProtoReflect.Descriptor instead.
func (*ClusterLogInfo) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *ClusterLogInfo) GetIsOn() int32 {
	if x != nil {
		return x.IsOn
	}
	return 0
}

func (x *ClusterLogInfo) GetNodeLogSize() int32 {
	if x != nil {
		return x.NodeLogSize
	}
	return 0
}

func (x *ClusterLogInfo) GetIsDebug() int32 {
	if x != nil {
		return x.IsDebug
	}
	return 0
}

func (x *ClusterLogInfo) GetDebugType() string {
	if x != nil {
		return x.DebugType
	}
	return ""
}

func (x *ClusterLogInfo) GetRemoteLogIp() string {
	if x != nil {
		return x.RemoteLogIp
	}
	return ""
}

func (x *ClusterLogInfo) GetRemoteLogPort() int32 {
	if x != nil {
		return x.RemoteLogPort
	}
	return 0
}

type ClusterCacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCacheOpen       int32  `protobuf:"varint,3,opt,name=is_cache_open,json=isCacheOpen,proto3" json:"is_cache_open,omitempty"`                     //缓存开关, 1表示开始, 2表示关闭.
	IsCookieCacheOpen int32  `protobuf:"varint,4,opt,name=is_cookie_cache_open,json=isCookieCacheOpen,proto3" json:"is_cookie_cache_open,omitempty"` //Cookie是否缓存, 1表示不缓存任何的Cookie, 2表示为任何类型缓存Cookie, 3只为图片缓存cookie, 4只为文本缓存cookie.
	RamCacheSize      int32  `protobuf:"varint,5,opt,name=ram_cache_size,json=ramCacheSize,proto3" json:"ram_cache_size,omitempty"`                  //内存缓存大小(M),存储包含单位.如256M, 只有"-1"取值不带单位, 表示系统自动优化该参数
	CacheDbSize       int32  `protobuf:"varint,6,opt,name=cache_db_size,json=cacheDbSize,proto3" json:"cache_db_size,omitempty"`                     //磁盘缓存大小(M)
	CacheDbPath       string `protobuf:"bytes,7,opt,name=cache_db_path,json=cacheDbPath,proto3" json:"cache_db_path,omitempty"`                      //缓存目录
	CacheStrategy     int32  `protobuf:"varint,8,opt,name=cache_strategy,json=cacheStrategy,proto3" json:"cache_strategy,omitempty"`                 //缓存更新策略, 1,2,3,4,5. 1表示使用缓存指引或者启发式的；2如果启发式的则认为缓存内容过时;3认为缓存内容总是过时，需要重新生效；4绝不过时；5除非请求报文有If-Modified-Since向，否则同1；
	RequiredHeaders   string `protobuf:"bytes,9,opt,name=required_headers,json=requiredHeaders,proto3" json:"required_headers,omitempty"`            //缓存资源需携带HTTP首部字段, 1/2/3, 1表示不需要报文头限制就可缓存内容；2报文头需要Last-Modified项或者显式设置了生存周期Expires 或者设置Cache-Control: max-age项可以缓存；3显式的写明了Expires或者Cache-Control: max-age项。
}

func (x *ClusterCacheInfo) Reset() {
	*x = ClusterCacheInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCacheInfo) ProtoMessage() {}

func (x *ClusterCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCacheInfo.ProtoReflect.Descriptor instead.
func (*ClusterCacheInfo) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *ClusterCacheInfo) GetIsCacheOpen() int32 {
	if x != nil {
		return x.IsCacheOpen
	}
	return 0
}

func (x *ClusterCacheInfo) GetIsCookieCacheOpen() int32 {
	if x != nil {
		return x.IsCookieCacheOpen
	}
	return 0
}

func (x *ClusterCacheInfo) GetRamCacheSize() int32 {
	if x != nil {
		return x.RamCacheSize
	}
	return 0
}

func (x *ClusterCacheInfo) GetCacheDbSize() int32 {
	if x != nil {
		return x.CacheDbSize
	}
	return 0
}

func (x *ClusterCacheInfo) GetCacheDbPath() string {
	if x != nil {
		return x.CacheDbPath
	}
	return ""
}

func (x *ClusterCacheInfo) GetCacheStrategy() int32 {
	if x != nil {
		return x.CacheStrategy
	}
	return 0
}

func (x *ClusterCacheInfo) GetRequiredHeaders() string {
	if x != nil {
		return x.RequiredHeaders
	}
	return ""
}

type ClusterPublicInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string              `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"` //集群编号
	OperType    int32               `protobuf:"varint,2,opt,name=oper_type,json=operType,proto3" json:"oper_type,omitempty"`   //操作类型:增删改三种操作. 1表示增加, 2表示删除, 3表示修改.
	BalanceInfo *ClusterBalanceInfo `protobuf:"bytes,3,opt,name=balance_info,json=balanceInfo,proto3" json:"balance_info,omitempty"`
	AppInfo     *ClusterAppInfo     `protobuf:"bytes,4,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
	LogInfo     *ClusterLogInfo     `protobuf:"bytes,5,opt,name=log_info,json=logInfo,proto3" json:"log_info,omitempty"`
	CacheInfo   *ClusterCacheInfo   `protobuf:"bytes,6,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *ClusterPublicInfoReq) Reset() {
	*x = ClusterPublicInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPublicInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPublicInfoReq) ProtoMessage() {}

func (x *ClusterPublicInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPublicInfoReq.ProtoReflect.Descriptor instead.
func (*ClusterPublicInfoReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *ClusterPublicInfoReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterPublicInfoReq) GetOperType() int32 {
	if x != nil {
		return x.OperType
	}
	return 0
}

func (x *ClusterPublicInfoReq) GetBalanceInfo() *ClusterBalanceInfo {
	if x != nil {
		return x.BalanceInfo
	}
	return nil
}

func (x *ClusterPublicInfoReq) GetAppInfo() *ClusterAppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *ClusterPublicInfoReq) GetLogInfo() *ClusterLogInfo {
	if x != nil {
		return x.LogInfo
	}
	return nil
}

func (x *ClusterPublicInfoReq) GetCacheInfo() *ClusterCacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

type DeviceUsageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsage  string `protobuf:"bytes,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`     //CPU利用率
	MemUsage  string `protobuf:"bytes,2,opt,name=mem_usage,json=memUsage,proto3" json:"mem_usage,omitempty"`     //内存利用率
	DiskUsage string `protobuf:"bytes,3,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`  //磁盘利用率
	IsOffline int32  `protobuf:"varint,4,opt,name=is_offline,json=isOffline,proto3" json:"is_offline,omitempty"` //是否离线(退出集群). 1在线, 2离线.
}

func (x *DeviceUsageRsp) Reset() {
	*x = DeviceUsageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUsageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUsageRsp) ProtoMessage() {}

func (x *DeviceUsageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUsageRsp.ProtoReflect.Descriptor instead.
func (*DeviceUsageRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *DeviceUsageRsp) GetCpuUsage() string {
	if x != nil {
		return x.CpuUsage
	}
	return ""
}

func (x *DeviceUsageRsp) GetMemUsage() string {
	if x != nil {
		return x.MemUsage
	}
	return ""
}

func (x *DeviceUsageRsp) GetDiskUsage() string {
	if x != nil {
		return x.DiskUsage
	}
	return ""
}

func (x *DeviceUsageRsp) GetIsOffline() int32 {
	if x != nil {
		return x.IsOffline
	}
	return 0
}

type ManageIPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsIpv4 int32  `protobuf:"varint,1,opt,name=is_ipv4,json=isIpv4,proto3" json:"is_ipv4,omitempty"` //1 表示IPv4地址, 2表示IPv6地址
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`                        //IP for V4 or V6 管理地址
}

func (x *ManageIPReq) Reset() {
	*x = ManageIPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageIPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageIPReq) ProtoMessage() {}

func (x *ManageIPReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageIPReq.ProtoReflect.Descriptor instead.
func (*ManageIPReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *ManageIPReq) GetIsIpv4() int32 {
	if x != nil {
		return x.IsIpv4
	}
	return 0
}

func (x *ManageIPReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type IsExistResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExist int32  `protobuf:"varint,1,opt,name=is_exist,json=isExist,proto3" json:"is_exist,omitempty"` //1表示存在, 2表示不存在.
	HostId  string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`     //设备id
}

func (x *IsExistResp) Reset() {
	*x = IsExistResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsExistResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsExistResp) ProtoMessage() {}

func (x *IsExistResp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsExistResp.ProtoReflect.Descriptor instead.
func (*IsExistResp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *IsExistResp) GetIsExist() int32 {
	if x != nil {
		return x.IsExist
	}
	return 0
}

func (x *IsExistResp) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type DeviceIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId []string `protobuf:"bytes,1,rep,name=host_id,json=hostId,proto3" json:"host_id,omitempty"` //设备编号列表
}

func (x *DeviceIDReq) Reset() {
	*x = DeviceIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIDReq) ProtoMessage() {}

func (x *DeviceIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIDReq.ProtoReflect.Descriptor instead.
func (*DeviceIDReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *DeviceIDReq) GetHostId() []string {
	if x != nil {
		return x.HostId
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId     string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`             //设备ID
	HostName   string `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`       //设备名称
	DeviceType string `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"` //设备类型,如6ATE,6EAG
	Ipv4Addr   string `protobuf:"bytes,4,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`       //IPv4管理地址
	Ipv6Addr   string `protobuf:"bytes,5,opt,name=ipv6_addr,json=ipv6Addr,proto3" json:"ipv6_addr,omitempty"`       //IPv6管理地址
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *Device) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *Device) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Device) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Device) GetIpv4Addr() string {
	if x != nil {
		return x.Ipv4Addr
	}
	return ""
}

func (x *Device) GetIpv6Addr() string {
	if x != nil {
		return x.Ipv6Addr
	}
	return ""
}

type DevicesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device []*Device `protobuf:"bytes,1,rep,name=device,proto3" json:"device,omitempty"` //设备详情列表
}

func (x *DevicesRsp) Reset() {
	*x = DevicesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesRsp) ProtoMessage() {}

func (x *DevicesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesRsp.ProtoReflect.Descriptor instead.
func (*DevicesRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{26}
}

func (x *DevicesRsp) GetDevice() []*Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type UsedVIPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsIpv4    bool   `protobuf:"varint,1,opt,name=is_ipv4,json=isIpv4,proto3" json:"is_ipv4,omitempty"`         //默认IPv6，当0时表示IPv6，1表示IPv4。
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"` //集群ID.
}

func (x *UsedVIPReq) Reset() {
	*x = UsedVIPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsedVIPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsedVIPReq) ProtoMessage() {}

func (x *UsedVIPReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsedVIPReq.ProtoReflect.Descriptor instead.
func (*UsedVIPReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{27}
}

func (x *UsedVIPReq) GetIsIpv4() bool {
	if x != nil {
		return x.IsIpv4
	}
	return false
}

func (x *UsedVIPReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type VIPCountRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedVip4Count int32 `protobuf:"varint,1,opt,name=used_vip4_count,json=usedVip4Count,proto3" json:"used_vip4_count,omitempty"` //已经使用的V4的VIP数量
	UsedVip6Count int32 `protobuf:"varint,2,opt,name=used_vip6_count,json=usedVip6Count,proto3" json:"used_vip6_count,omitempty"` //已经使用的V6的VIP数量
}

func (x *VIPCountRsp) Reset() {
	*x = VIPCountRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VIPCountRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VIPCountRsp) ProtoMessage() {}

func (x *VIPCountRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VIPCountRsp.ProtoReflect.Descriptor instead.
func (*VIPCountRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{28}
}

func (x *VIPCountRsp) GetUsedVip4Count() int32 {
	if x != nil {
		return x.UsedVip4Count
	}
	return 0
}

func (x *VIPCountRsp) GetUsedVip6Count() int32 {
	if x != nil {
		return x.UsedVip6Count
	}
	return 0
}

type VIPListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vip []string `protobuf:"bytes,1,rep,name=vip,proto3" json:"vip,omitempty"` //已经使用的VIP，可以是IPv4的地址，也可以是IPv6地址。
}

func (x *VIPListRsp) Reset() {
	*x = VIPListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VIPListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VIPListRsp) ProtoMessage() {}

func (x *VIPListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VIPListRsp.ProtoReflect.Descriptor instead.
func (*VIPListRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{29}
}

func (x *VIPListRsp) GetVip() []string {
	if x != nil {
		return x.Vip
	}
	return nil
}

type ServiceMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyName     string `protobuf:"bytes,1,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`             //服务的英文名称或编号
	ChineseName string `protobuf:"bytes,2,opt,name=chinese_name,json=chineseName,proto3" json:"chinese_name,omitempty"` //服务的中文名称,或者描述.
}

func (x *ServiceMsg) Reset() {
	*x = ServiceMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMsg) ProtoMessage() {}

func (x *ServiceMsg) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMsg.ProtoReflect.Descriptor instead.
func (*ServiceMsg) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{30}
}

func (x *ServiceMsg) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *ServiceMsg) GetChineseName() string {
	if x != nil {
		return x.ChineseName
	}
	return ""
}

type ServiceListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service []*ServiceMsg `protobuf:"bytes,1,rep,name=service,proto3" json:"service,omitempty"` //服务
}

func (x *ServiceListRsp) Reset() {
	*x = ServiceListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListRsp) ProtoMessage() {}

func (x *ServiceListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListRsp.ProtoReflect.Descriptor instead.
func (*ServiceListRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{31}
}

func (x *ServiceListRsp) GetService() []*ServiceMsg {
	if x != nil {
		return x.Service
	}
	return nil
}

type FilterType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                            //编号
	FilterContent string `protobuf:"bytes,2,opt,name=filter_content,json=filterContent,proto3" json:"filter_content,omitempty"` //过滤内容
	Comment       string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`                                  //备注
}

func (x *FilterType) Reset() {
	*x = FilterType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterType) ProtoMessage() {}

func (x *FilterType) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterType.ProtoReflect.Descriptor instead.
func (*FilterType) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{32}
}

func (x *FilterType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilterType) GetFilterContent() string {
	if x != nil {
		return x.FilterContent
	}
	return ""
}

func (x *FilterType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type RaltFilterTypeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType []*FilterType `protobuf:"bytes,1,rep,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"` //报文头的Content-Type的过滤类型
}

func (x *RaltFilterTypeRsp) Reset() {
	*x = RaltFilterTypeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaltFilterTypeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaltFilterTypeRsp) ProtoMessage() {}

func (x *RaltFilterTypeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaltFilterTypeRsp.ProtoReflect.Descriptor instead.
func (*RaltFilterTypeRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{33}
}

func (x *RaltFilterTypeRsp) GetFilterType() []*FilterType {
	if x != nil {
		return x.FilterType
	}
	return nil
}

type RaltFilterTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string      `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`    //集群编号
	OperType   int32       `protobuf:"varint,2,opt,name=oper_type,json=operType,proto3" json:"oper_type,omitempty"`      //操作类型:增删改三种操作. 1表示增加, 2表示删除, 3表示修改.
	FilterType *FilterType `protobuf:"bytes,3,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"` //报文头的Content-Type的过滤类型
}

func (x *RaltFilterTypeReq) Reset() {
	*x = RaltFilterTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaltFilterTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaltFilterTypeReq) ProtoMessage() {}

func (x *RaltFilterTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaltFilterTypeReq.ProtoReflect.Descriptor instead.
func (*RaltFilterTypeReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{34}
}

func (x *RaltFilterTypeReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RaltFilterTypeReq) GetOperType() int32 {
	if x != nil {
		return x.OperType
	}
	return 0
}

func (x *RaltFilterTypeReq) GetFilterType() *FilterType {
	if x != nil {
		return x.FilterType
	}
	return nil
}

type QryFreeDeviceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QryFreeDeviceReq) Reset() {
	*x = QryFreeDeviceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryFreeDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryFreeDeviceReq) ProtoMessage() {}

func (x *QryFreeDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryFreeDeviceReq.ProtoReflect.Descriptor instead.
func (*QryFreeDeviceReq) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{35}
}

type QryFreeDeviceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId []string `protobuf:"bytes,1,rep,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *QryFreeDeviceRsp) Reset() {
	*x = QryFreeDeviceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryFreeDeviceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryFreeDeviceRsp) ProtoMessage() {}

func (x *QryFreeDeviceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryFreeDeviceRsp.ProtoReflect.Descriptor instead.
func (*QryFreeDeviceRsp) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{36}
}

func (x *QryFreeDeviceRsp) GetHostId() []string {
	if x != nil {
		return x.HostId
	}
	return nil
}

var File_cluster_proto protoreflect.FileDescriptor

var file_cluster_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x0a,
	0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x0c,
	0x0a, 0x0a, 0x4e, 0x55, 0x4c, 0x4c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x22, 0x2d, 0x0a, 0x0c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x09, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x31, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x4f, 0x6e, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x56, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x50, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x82, 0x02, 0x0a,
	0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x6f, 0x63, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5b, 0x0a, 0x0b, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x56, 0x69, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x56, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3c,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xe6, 0x03, 0x0a,
	0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x69, 0x70,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x07, 0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x07, 0x69, 0x70, 0x76, 0x36, 0x56, 0x69, 0x70, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6c, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x61, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x66, 0x69, 0x78, 0x22, 0x4d, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x8b, 0x03, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x61, 0x6c, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x61,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x69, 0x61, 0x53, 0x74, 0x72, 0x12,
	0x35, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x69, 0x61, 0x53, 0x74, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x52, 0x10, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x58, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x49, 0x70, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x73,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64,
	0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22,
	0xc4, 0x02, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x36, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x73, 0x49, 0x70, 0x76, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x41, 0x0a, 0x0b, 0x49, 0x73, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x0b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x22, 0x39, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x2b,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x64, 0x56, 0x49, 0x50, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49, 0x70,
	0x76, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x5d, 0x0a, 0x0b, 0x56, 0x49, 0x50, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x34, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x56,
	0x69, 0x70, 0x34, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x76, 0x69, 0x70, 0x36, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x56, 0x69, 0x70, 0x36, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x1e, 0x0a, 0x0a, 0x56, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x70,
	0x22, 0x4a, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x0e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x31,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x5d, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x4d, 0x0a, 0x11, 0x52, 0x61, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x89, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x51,
	0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x22,
	0x2b, 0x0a, 0x10, 0x51, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x32, 0xb1, 0x08, 0x0a,
	0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x71, 0x72, 0x79, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x14, 0x71, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0f, 0x71, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x56, 0x49, 0x50, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x50, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x71, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x64, 0x56, 0x49, 0x50, 0x12, 0x17, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x56, 0x49, 0x50, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x49,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x71, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x71, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x61, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0d, 0x71, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x51,
	0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x51, 0x72,
	0x79, 0x46, 0x72, 0x65, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cluster_proto_rawDescOnce sync.Once
	file_cluster_proto_rawDescData = file_cluster_proto_rawDesc
)

func file_cluster_proto_rawDescGZIP() []byte {
	file_cluster_proto_rawDescOnce.Do(func() {
		file_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_cluster_proto_rawDescData)
	})
	return file_cluster_proto_rawDescData
}

var file_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_cluster_proto_goTypes = []interface{}{
	(*OperResult)(nil),           // 0: ate_cluster.OperResult
	(*NULLMsgReq)(nil),           // 1: ate_cluster.NULLMsgReq
	(*ClusterIDReq)(nil),         // 2: ate_cluster.ClusterIDReq
	(*HostIDReq)(nil),            // 3: ate_cluster.HostIDReq
	(*ClusterIDListReq)(nil),     // 4: ate_cluster.ClusterIDListReq
	(*ServiceOperation)(nil),     // 5: ate_cluster.ServiceOperation
	(*OneClusterInfo)(nil),       // 6: ate_cluster.OneClusterInfo
	(*ClusterSimpleInfoRsp)(nil), // 7: ate_cluster.ClusterSimpleInfoRsp
	(*DeviceStateReq)(nil),       // 8: ate_cluster.DeviceStateReq
	(*ServiceState)(nil),         // 9: ate_cluster.ServiceState
	(*DeviceStateRsp)(nil),       // 10: ate_cluster.DeviceStateRsp
	(*ClusterDetailInfoRsp)(nil), // 11: ate_cluster.ClusterDetailInfoRsp
	(*VipInterval)(nil),          // 12: ate_cluster.VipInterval
	(*NodeHost)(nil),             // 13: ate_cluster.NodeHost
	(*ClusterBalanceInfo)(nil),   // 14: ate_cluster.ClusterBalanceInfo
	(*ResourceType)(nil),         // 15: ate_cluster.ResourceType
	(*ForbiddenBrowser)(nil),     // 16: ate_cluster.ForbiddenBrowser
	(*ClusterAppInfo)(nil),       // 17: ate_cluster.ClusterAppInfo
	(*ClusterLogInfo)(nil),       // 18: ate_cluster.ClusterLogInfo
	(*ClusterCacheInfo)(nil),     // 19: ate_cluster.ClusterCacheInfo
	(*ClusterPublicInfoReq)(nil), // 20: ate_cluster.ClusterPublicInfoReq
	(*DeviceUsageRsp)(nil),       // 21: ate_cluster.DeviceUsageRsp
	(*ManageIPReq)(nil),          // 22: ate_cluster.ManageIPReq
	(*IsExistResp)(nil),          // 23: ate_cluster.IsExistResp
	(*DeviceIDReq)(nil),          // 24: ate_cluster.DeviceIDReq
	(*Device)(nil),               // 25: ate_cluster.Device
	(*DevicesRsp)(nil),           // 26: ate_cluster.DevicesRsp
	(*UsedVIPReq)(nil),           // 27: ate_cluster.UsedVIPReq
	(*VIPCountRsp)(nil),          // 28: ate_cluster.VIPCountRsp
	(*VIPListRsp)(nil),           // 29: ate_cluster.VIPListRsp
	(*ServiceMsg)(nil),           // 30: ate_cluster.ServiceMsg
	(*ServiceListRsp)(nil),       // 31: ate_cluster.ServiceListRsp
	(*FilterType)(nil),           // 32: ate_cluster.FilterType
	(*RaltFilterTypeRsp)(nil),    // 33: ate_cluster.RaltFilterTypeRsp
	(*RaltFilterTypeReq)(nil),    // 34: ate_cluster.RaltFilterTypeReq
	(*QryFreeDeviceReq)(nil),     // 35: ate_cluster.QryFreeDeviceReq
	(*QryFreeDeviceRsp)(nil),     // 36: ate_cluster.QryFreeDeviceRsp
}
var file_cluster_proto_depIdxs = []int32{
	6,  // 0: ate_cluster.ClusterSimpleInfoRsp.cluster_info:type_name -> ate_cluster.OneClusterInfo
	5,  // 1: ate_cluster.DeviceStateReq.service_oper:type_name -> ate_cluster.ServiceOperation
	9,  // 2: ate_cluster.DeviceStateRsp.service_state:type_name -> ate_cluster.ServiceState
	14, // 3: ate_cluster.ClusterDetailInfoRsp.socs_info:type_name -> ate_cluster.ClusterBalanceInfo
	17, // 4: ate_cluster.ClusterDetailInfoRsp.app_info:type_name -> ate_cluster.ClusterAppInfo
	18, // 5: ate_cluster.ClusterDetailInfoRsp.log_info:type_name -> ate_cluster.ClusterLogInfo
	19, // 6: ate_cluster.ClusterDetailInfoRsp.cache_info:type_name -> ate_cluster.ClusterCacheInfo
	13, // 7: ate_cluster.ClusterBalanceInfo.node_host:type_name -> ate_cluster.NodeHost
	12, // 8: ate_cluster.ClusterBalanceInfo.ipv4_vip:type_name -> ate_cluster.VipInterval
	12, // 9: ate_cluster.ClusterBalanceInfo.ipv6_vip:type_name -> ate_cluster.VipInterval
	15, // 10: ate_cluster.ClusterAppInfo.resource_type:type_name -> ate_cluster.ResourceType
	16, // 11: ate_cluster.ClusterAppInfo.forbidden_browser:type_name -> ate_cluster.ForbiddenBrowser
	14, // 12: ate_cluster.ClusterPublicInfoReq.balance_info:type_name -> ate_cluster.ClusterBalanceInfo
	17, // 13: ate_cluster.ClusterPublicInfoReq.app_info:type_name -> ate_cluster.ClusterAppInfo
	18, // 14: ate_cluster.ClusterPublicInfoReq.log_info:type_name -> ate_cluster.ClusterLogInfo
	19, // 15: ate_cluster.ClusterPublicInfoReq.cache_info:type_name -> ate_cluster.ClusterCacheInfo
	25, // 16: ate_cluster.DevicesRsp.device:type_name -> ate_cluster.Device
	30, // 17: ate_cluster.ServiceListRsp.service:type_name -> ate_cluster.ServiceMsg
	32, // 18: ate_cluster.RaltFilterTypeRsp.filter_type:type_name -> ate_cluster.FilterType
	32, // 19: ate_cluster.RaltFilterTypeReq.filter_type:type_name -> ate_cluster.FilterType
	8,  // 20: ate_cluster.ClusterManager.setDeviceState:input_type -> ate_cluster.DeviceStateReq
	3,  // 21: ate_cluster.ClusterManager.getDeviceState:input_type -> ate_cluster.HostIDReq
	2,  // 22: ate_cluster.ClusterManager.qryOneCluster:input_type -> ate_cluster.ClusterIDReq
	20, // 23: ate_cluster.ClusterManager.setCluster:input_type -> ate_cluster.ClusterPublicInfoReq
	4,  // 24: ate_cluster.ClusterManager.qryClusterSimpleInfo:input_type -> ate_cluster.ClusterIDListReq
	3,  // 25: ate_cluster.ClusterManager.getDeviceUsage:input_type -> ate_cluster.HostIDReq
	22, // 26: ate_cluster.ClusterManager.isExistDevice:input_type -> ate_cluster.ManageIPReq
	24, // 27: ate_cluster.ClusterManager.getDevices:input_type -> ate_cluster.DeviceIDReq
	2,  // 28: ate_cluster.ClusterManager.qryUsedVIPCount:input_type -> ate_cluster.ClusterIDReq
	27, // 29: ate_cluster.ClusterManager.qryUsedVIP:input_type -> ate_cluster.UsedVIPReq
	3,  // 30: ate_cluster.ClusterManager.qryServiceList:input_type -> ate_cluster.HostIDReq
	2,  // 31: ate_cluster.ClusterManager.qryFilterTypes:input_type -> ate_cluster.ClusterIDReq
	34, // 32: ate_cluster.ClusterManager.setFilterTypes:input_type -> ate_cluster.RaltFilterTypeReq
	35, // 33: ate_cluster.ClusterManager.qryFreeDevice:input_type -> ate_cluster.QryFreeDeviceReq
	0,  // 34: ate_cluster.ClusterManager.setDeviceState:output_type -> ate_cluster.OperResult
	10, // 35: ate_cluster.ClusterManager.getDeviceState:output_type -> ate_cluster.DeviceStateRsp
	11, // 36: ate_cluster.ClusterManager.qryOneCluster:output_type -> ate_cluster.ClusterDetailInfoRsp
	0,  // 37: ate_cluster.ClusterManager.setCluster:output_type -> ate_cluster.OperResult
	7,  // 38: ate_cluster.ClusterManager.qryClusterSimpleInfo:output_type -> ate_cluster.ClusterSimpleInfoRsp
	21, // 39: ate_cluster.ClusterManager.getDeviceUsage:output_type -> ate_cluster.DeviceUsageRsp
	23, // 40: ate_cluster.ClusterManager.isExistDevice:output_type -> ate_cluster.IsExistResp
	26, // 41: ate_cluster.ClusterManager.getDevices:output_type -> ate_cluster.DevicesRsp
	28, // 42: ate_cluster.ClusterManager.qryUsedVIPCount:output_type -> ate_cluster.VIPCountRsp
	29, // 43: ate_cluster.ClusterManager.qryUsedVIP:output_type -> ate_cluster.VIPListRsp
	31, // 44: ate_cluster.ClusterManager.qryServiceList:output_type -> ate_cluster.ServiceListRsp
	33, // 45: ate_cluster.ClusterManager.qryFilterTypes:output_type -> ate_cluster.RaltFilterTypeRsp
	0,  // 46: ate_cluster.ClusterManager.setFilterTypes:output_type -> ate_cluster.OperResult
	36, // 47: ate_cluster.ClusterManager.qryFreeDevice:output_type -> ate_cluster.QryFreeDeviceRsp
	34, // [34:48] is the sub-list for method output_type
	20, // [20:34] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_cluster_proto_init() }
func file_cluster_proto_init() {
	if File_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NULLMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterIDListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSimpleInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDetailInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterBalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbiddenBrowser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCacheInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPublicInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUsageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageIPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsExistResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsedVIPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VIPCountRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VIPListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaltFilterTypeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaltFilterTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryFreeDeviceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryFreeDeviceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cluster_proto_goTypes,
		DependencyIndexes: file_cluster_proto_depIdxs,
		MessageInfos:      file_cluster_proto_msgTypes,
	}.Build()
	File_cluster_proto = out.File
	file_cluster_proto_rawDesc = nil
	file_cluster_proto_goTypes = nil
	file_cluster_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClusterManagerClient is the client API for ClusterManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterManagerClient interface {
	SetDeviceState(ctx context.Context, in *DeviceStateReq, opts ...grpc.CallOption) (*OperResult, error)
	GetDeviceState(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*DeviceStateRsp, error)
	QryOneCluster(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*ClusterDetailInfoRsp, error)
	SetCluster(ctx context.Context, in *ClusterPublicInfoReq, opts ...grpc.CallOption) (*OperResult, error)
	QryClusterSimpleInfo(ctx context.Context, in *ClusterIDListReq, opts ...grpc.CallOption) (*ClusterSimpleInfoRsp, error)
	GetDeviceUsage(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*DeviceUsageRsp, error)
	IsExistDevice(ctx context.Context, in *ManageIPReq, opts ...grpc.CallOption) (*IsExistResp, error)
	GetDevices(ctx context.Context, in *DeviceIDReq, opts ...grpc.CallOption) (*DevicesRsp, error)
	QryUsedVIPCount(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*VIPCountRsp, error)
	QryUsedVIP(ctx context.Context, in *UsedVIPReq, opts ...grpc.CallOption) (*VIPListRsp, error)
	QryServiceList(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*ServiceListRsp, error)
	QryFilterTypes(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*RaltFilterTypeRsp, error)
	SetFilterTypes(ctx context.Context, in *RaltFilterTypeReq, opts ...grpc.CallOption) (*OperResult, error)
	QryFreeDevice(ctx context.Context, in *QryFreeDeviceReq, opts ...grpc.CallOption) (*QryFreeDeviceRsp, error)
}

type clusterManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagerClient(cc grpc.ClientConnInterface) ClusterManagerClient {
	return &clusterManagerClient{cc}
}

func (c *clusterManagerClient) SetDeviceState(ctx context.Context, in *DeviceStateReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/setDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetDeviceState(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*DeviceStateRsp, error) {
	out := new(DeviceStateRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/getDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryOneCluster(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*ClusterDetailInfoRsp, error) {
	out := new(ClusterDetailInfoRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryOneCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) SetCluster(ctx context.Context, in *ClusterPublicInfoReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/setCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryClusterSimpleInfo(ctx context.Context, in *ClusterIDListReq, opts ...grpc.CallOption) (*ClusterSimpleInfoRsp, error) {
	out := new(ClusterSimpleInfoRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryClusterSimpleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetDeviceUsage(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*DeviceUsageRsp, error) {
	out := new(DeviceUsageRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/getDeviceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) IsExistDevice(ctx context.Context, in *ManageIPReq, opts ...grpc.CallOption) (*IsExistResp, error) {
	out := new(IsExistResp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/isExistDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetDevices(ctx context.Context, in *DeviceIDReq, opts ...grpc.CallOption) (*DevicesRsp, error) {
	out := new(DevicesRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/getDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryUsedVIPCount(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*VIPCountRsp, error) {
	out := new(VIPCountRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryUsedVIPCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryUsedVIP(ctx context.Context, in *UsedVIPReq, opts ...grpc.CallOption) (*VIPListRsp, error) {
	out := new(VIPListRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryUsedVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryServiceList(ctx context.Context, in *HostIDReq, opts ...grpc.CallOption) (*ServiceListRsp, error) {
	out := new(ServiceListRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryServiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryFilterTypes(ctx context.Context, in *ClusterIDReq, opts ...grpc.CallOption) (*RaltFilterTypeRsp, error) {
	out := new(RaltFilterTypeRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryFilterTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) SetFilterTypes(ctx context.Context, in *RaltFilterTypeReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/setFilterTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QryFreeDevice(ctx context.Context, in *QryFreeDeviceReq, opts ...grpc.CallOption) (*QryFreeDeviceRsp, error) {
	out := new(QryFreeDeviceRsp)
	err := c.cc.Invoke(ctx, "/ate_cluster.ClusterManager/qryFreeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagerServer is the server API for ClusterManager service.
type ClusterManagerServer interface {
	SetDeviceState(context.Context, *DeviceStateReq) (*OperResult, error)
	GetDeviceState(context.Context, *HostIDReq) (*DeviceStateRsp, error)
	QryOneCluster(context.Context, *ClusterIDReq) (*ClusterDetailInfoRsp, error)
	SetCluster(context.Context, *ClusterPublicInfoReq) (*OperResult, error)
	QryClusterSimpleInfo(context.Context, *ClusterIDListReq) (*ClusterSimpleInfoRsp, error)
	GetDeviceUsage(context.Context, *HostIDReq) (*DeviceUsageRsp, error)
	IsExistDevice(context.Context, *ManageIPReq) (*IsExistResp, error)
	GetDevices(context.Context, *DeviceIDReq) (*DevicesRsp, error)
	QryUsedVIPCount(context.Context, *ClusterIDReq) (*VIPCountRsp, error)
	QryUsedVIP(context.Context, *UsedVIPReq) (*VIPListRsp, error)
	QryServiceList(context.Context, *HostIDReq) (*ServiceListRsp, error)
	QryFilterTypes(context.Context, *ClusterIDReq) (*RaltFilterTypeRsp, error)
	SetFilterTypes(context.Context, *RaltFilterTypeReq) (*OperResult, error)
	QryFreeDevice(context.Context, *QryFreeDeviceReq) (*QryFreeDeviceRsp, error)
}

// UnimplementedClusterManagerServer can be embedded to have forward compatible implementations.
type UnimplementedClusterManagerServer struct {
}

func (*UnimplementedClusterManagerServer) SetDeviceState(context.Context, *DeviceStateReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceState not implemented")
}
func (*UnimplementedClusterManagerServer) GetDeviceState(context.Context, *HostIDReq) (*DeviceStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceState not implemented")
}
func (*UnimplementedClusterManagerServer) QryOneCluster(context.Context, *ClusterIDReq) (*ClusterDetailInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryOneCluster not implemented")
}
func (*UnimplementedClusterManagerServer) SetCluster(context.Context, *ClusterPublicInfoReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCluster not implemented")
}
func (*UnimplementedClusterManagerServer) QryClusterSimpleInfo(context.Context, *ClusterIDListReq) (*ClusterSimpleInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryClusterSimpleInfo not implemented")
}
func (*UnimplementedClusterManagerServer) GetDeviceUsage(context.Context, *HostIDReq) (*DeviceUsageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceUsage not implemented")
}
func (*UnimplementedClusterManagerServer) IsExistDevice(context.Context, *ManageIPReq) (*IsExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistDevice not implemented")
}
func (*UnimplementedClusterManagerServer) GetDevices(context.Context, *DeviceIDReq) (*DevicesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (*UnimplementedClusterManagerServer) QryUsedVIPCount(context.Context, *ClusterIDReq) (*VIPCountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryUsedVIPCount not implemented")
}
func (*UnimplementedClusterManagerServer) QryUsedVIP(context.Context, *UsedVIPReq) (*VIPListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryUsedVIP not implemented")
}
func (*UnimplementedClusterManagerServer) QryServiceList(context.Context, *HostIDReq) (*ServiceListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryServiceList not implemented")
}
func (*UnimplementedClusterManagerServer) QryFilterTypes(context.Context, *ClusterIDReq) (*RaltFilterTypeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryFilterTypes not implemented")
}
func (*UnimplementedClusterManagerServer) SetFilterTypes(context.Context, *RaltFilterTypeReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFilterTypes not implemented")
}
func (*UnimplementedClusterManagerServer) QryFreeDevice(context.Context, *QryFreeDeviceReq) (*QryFreeDeviceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryFreeDevice not implemented")
}

func RegisterClusterManagerServer(s *grpc.Server, srv ClusterManagerServer) {
	s.RegisterService(&_ClusterManager_serviceDesc, srv)
}

func _ClusterManager_SetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/SetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SetDeviceState(ctx, req.(*DeviceStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/GetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetDeviceState(ctx, req.(*HostIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryOneCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryOneCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryOneCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryOneCluster(ctx, req.(*ClusterIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_SetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterPublicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/SetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SetCluster(ctx, req.(*ClusterPublicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryClusterSimpleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIDListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryClusterSimpleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryClusterSimpleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryClusterSimpleInfo(ctx, req.(*ClusterIDListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetDeviceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetDeviceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/GetDeviceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetDeviceUsage(ctx, req.(*HostIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_IsExistDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).IsExistDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/IsExistDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).IsExistDevice(ctx, req.(*ManageIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetDevices(ctx, req.(*DeviceIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryUsedVIPCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryUsedVIPCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryUsedVIPCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryUsedVIPCount(ctx, req.(*ClusterIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryUsedVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsedVIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryUsedVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryUsedVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryUsedVIP(ctx, req.(*UsedVIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryServiceList(ctx, req.(*HostIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryFilterTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryFilterTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryFilterTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryFilterTypes(ctx, req.(*ClusterIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_SetFilterTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaltFilterTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SetFilterTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/SetFilterTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SetFilterTypes(ctx, req.(*RaltFilterTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QryFreeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryFreeDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QryFreeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ate_cluster.ClusterManager/QryFreeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QryFreeDevice(ctx, req.(*QryFreeDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ate_cluster.ClusterManager",
	HandlerType: (*ClusterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setDeviceState",
			Handler:    _ClusterManager_SetDeviceState_Handler,
		},
		{
			MethodName: "getDeviceState",
			Handler:    _ClusterManager_GetDeviceState_Handler,
		},
		{
			MethodName: "qryOneCluster",
			Handler:    _ClusterManager_QryOneCluster_Handler,
		},
		{
			MethodName: "setCluster",
			Handler:    _ClusterManager_SetCluster_Handler,
		},
		{
			MethodName: "qryClusterSimpleInfo",
			Handler:    _ClusterManager_QryClusterSimpleInfo_Handler,
		},
		{
			MethodName: "getDeviceUsage",
			Handler:    _ClusterManager_GetDeviceUsage_Handler,
		},
		{
			MethodName: "isExistDevice",
			Handler:    _ClusterManager_IsExistDevice_Handler,
		},
		{
			MethodName: "getDevices",
			Handler:    _ClusterManager_GetDevices_Handler,
		},
		{
			MethodName: "qryUsedVIPCount",
			Handler:    _ClusterManager_QryUsedVIPCount_Handler,
		},
		{
			MethodName: "qryUsedVIP",
			Handler:    _ClusterManager_QryUsedVIP_Handler,
		},
		{
			MethodName: "qryServiceList",
			Handler:    _ClusterManager_QryServiceList_Handler,
		},
		{
			MethodName: "qryFilterTypes",
			Handler:    _ClusterManager_QryFilterTypes_Handler,
		},
		{
			MethodName: "setFilterTypes",
			Handler:    _ClusterManager_SetFilterTypes_Handler,
		},
		{
			MethodName: "qryFreeDevice",
			Handler:    _ClusterManager_QryFreeDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
