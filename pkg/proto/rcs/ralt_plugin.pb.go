//*******************************************************************************
//
// @des ralt configuration service of ATE
//
// @file ate_ralt_plugin.proto
//
// @author lsp
//
// @date 4.18
//
// @ver 1.2.1
//
// @copy rights reserved
//
//******************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.0
// source: ralt_plugin.proto

package rcs

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OperResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` //操作结果, 0成功, 错误码:100~199属于业务错误, 200~299属于集群错误, 300~399属于日志,统计 错误.
	RetMsg  string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`     //相关信息, 英文描述.
}

func (x *OperResult) Reset() {
	*x = OperResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperResult) ProtoMessage() {}

func (x *OperResult) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperResult.ProtoReflect.Descriptor instead.
func (*OperResult) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *OperResult) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *OperResult) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

type NULLMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NULLMsgReq) Reset() {
	*x = NULLMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NULLMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NULLMsgReq) ProtoMessage() {}

func (x *NULLMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NULLMsgReq.ProtoReflect.Descriptor instead.
func (*NULLMsgReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{1}
}

type NoArgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoArgReq) Reset() {
	*x = NoArgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoArgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoArgReq) ProtoMessage() {}

func (x *NoArgReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoArgReq.ProtoReflect.Descriptor instead.
func (*NoArgReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{2}
}

type OptRaltGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iopt                     int32             `protobuf:"varint,1,opt,name=iopt,proto3" json:"iopt,omitempty"`                                                        //操作类型，1:增加;2:删除;3:修改。*以下类同的不再重复说明*
	StrgroupId               string            `protobuf:"bytes,2,opt,name=strgroup_id,json=strgroupId,proto3" json:"strgroup_id,omitempty"`                           //配置组ID
	StrgroupName             string            `protobuf:"bytes,3,opt,name=strgroup_name,json=strgroupName,proto3" json:"strgroup_name,omitempty"`                     //配置组名称
	StrgroupHrefDomain       string            `protobuf:"bytes,4,opt,name=strgroup_href_domain,json=strgroupHrefDomain,proto3" json:"strgroup_href_domain,omitempty"` //组配置外链域名
	StrgroupHrefDomainIpAddr string            `protobuf:"bytes,5,opt,name=strgroup_href_domain_ip_addr,json=strgroupHrefDomainIpAddr,proto3" json:"strgroup_href_domain_ip_addr,omitempty"`
	ItransformMod            int32             `protobuf:"varint,6,opt,name=itransform_mod,json=itransformMod,proto3" json:"itransform_mod,omitempty"` //外链模式：1.路径模式；2.域名模式
	ImaxSession              int32             `protobuf:"varint,7,opt,name=imax_session,json=imaxSession,proto3" json:"imax_session,omitempty"`       //最大会话数
	StrclusterId             string            `protobuf:"bytes,8,opt,name=strcluster_id,json=strclusterId,proto3" json:"strcluster_id,omitempty"`     //集群组ID
	FuncSwitcher             *FuncSwitcherInfo `protobuf:"bytes,9,opt,name=func_switcher,json=funcSwitcher,proto3" json:"func_switcher,omitempty"`
	Rule                     []*RuleInfo       `protobuf:"bytes,10,rep,name=rule,proto3" json:"rule,omitempty"`
}

func (x *OptRaltGroupReq) Reset() {
	*x = OptRaltGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptRaltGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptRaltGroupReq) ProtoMessage() {}

func (x *OptRaltGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptRaltGroupReq.ProtoReflect.Descriptor instead.
func (*OptRaltGroupReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *OptRaltGroupReq) GetIopt() int32 {
	if x != nil {
		return x.Iopt
	}
	return 0
}

func (x *OptRaltGroupReq) GetStrgroupId() string {
	if x != nil {
		return x.StrgroupId
	}
	return ""
}

func (x *OptRaltGroupReq) GetStrgroupName() string {
	if x != nil {
		return x.StrgroupName
	}
	return ""
}

func (x *OptRaltGroupReq) GetStrgroupHrefDomain() string {
	if x != nil {
		return x.StrgroupHrefDomain
	}
	return ""
}

func (x *OptRaltGroupReq) GetStrgroupHrefDomainIpAddr() string {
	if x != nil {
		return x.StrgroupHrefDomainIpAddr
	}
	return ""
}

func (x *OptRaltGroupReq) GetItransformMod() int32 {
	if x != nil {
		return x.ItransformMod
	}
	return 0
}

func (x *OptRaltGroupReq) GetImaxSession() int32 {
	if x != nil {
		return x.ImaxSession
	}
	return 0
}

func (x *OptRaltGroupReq) GetStrclusterId() string {
	if x != nil {
		return x.StrclusterId
	}
	return ""
}

func (x *OptRaltGroupReq) GetFuncSwitcher() *FuncSwitcherInfo {
	if x != nil {
		return x.FuncSwitcher
	}
	return nil
}

func (x *OptRaltGroupReq) GetRule() []*RuleInfo {
	if x != nil {
		return x.Rule
	}
	return nil
}

type GetRaltGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrgroupId string `protobuf:"bytes,1,opt,name=strgroup_id,json=strgroupId,proto3" json:"strgroup_id,omitempty"` //配置组ID，空字符串返回全部，否则单个
}

func (x *GetRaltGroupReq) Reset() {
	*x = GetRaltGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaltGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaltGroupReq) ProtoMessage() {}

func (x *GetRaltGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaltGroupReq.ProtoReflect.Descriptor instead.
func (*GetRaltGroupReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *GetRaltGroupReq) GetStrgroupId() string {
	if x != nil {
		return x.StrgroupId
	}
	return ""
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrgroupId               string            `protobuf:"bytes,1,opt,name=strgroup_id,json=strgroupId,proto3" json:"strgroup_id,omitempty"`
	StrgroupName             string            `protobuf:"bytes,2,opt,name=strgroup_name,json=strgroupName,proto3" json:"strgroup_name,omitempty"` //配置组名称
	IwebsiteNum              int32             `protobuf:"varint,3,opt,name=iwebsite_num,json=iwebsiteNum,proto3" json:"iwebsite_num,omitempty"`   //应用网站数量
	StrclusterId             string            `protobuf:"bytes,4,opt,name=strcluster_id,json=strclusterId,proto3" json:"strcluster_id,omitempty"` //集群组ID
	ItransformMod            int32             `protobuf:"varint,5,opt,name=itransform_mod,json=itransformMod,proto3" json:"itransform_mod,omitempty"`
	StrgroupHrefDomain       string            `protobuf:"bytes,6,opt,name=strgroup_href_domain,json=strgroupHrefDomain,proto3" json:"strgroup_href_domain,omitempty"`                       //组配置外链域名
	StrgroupHrefDomainIpAddr string            `protobuf:"bytes,7,opt,name=strgroup_href_domain_ip_addr,json=strgroupHrefDomainIpAddr,proto3" json:"strgroup_href_domain_ip_addr,omitempty"` //组配置外链域名地址
	ImaxSession              int32             `protobuf:"varint,8,opt,name=imax_session,json=imaxSession,proto3" json:"imax_session,omitempty"`
	FuncSwitcher             *FuncSwitcherInfo `protobuf:"bytes,9,opt,name=func_switcher,json=funcSwitcher,proto3" json:"func_switcher,omitempty"`
	Rule                     []*RuleInfo       `protobuf:"bytes,10,rep,name=rule,proto3" json:"rule,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *GroupInfo) GetStrgroupId() string {
	if x != nil {
		return x.StrgroupId
	}
	return ""
}

func (x *GroupInfo) GetStrgroupName() string {
	if x != nil {
		return x.StrgroupName
	}
	return ""
}

func (x *GroupInfo) GetIwebsiteNum() int32 {
	if x != nil {
		return x.IwebsiteNum
	}
	return 0
}

func (x *GroupInfo) GetStrclusterId() string {
	if x != nil {
		return x.StrclusterId
	}
	return ""
}

func (x *GroupInfo) GetItransformMod() int32 {
	if x != nil {
		return x.ItransformMod
	}
	return 0
}

func (x *GroupInfo) GetStrgroupHrefDomain() string {
	if x != nil {
		return x.StrgroupHrefDomain
	}
	return ""
}

func (x *GroupInfo) GetStrgroupHrefDomainIpAddr() string {
	if x != nil {
		return x.StrgroupHrefDomainIpAddr
	}
	return ""
}

func (x *GroupInfo) GetImaxSession() int32 {
	if x != nil {
		return x.ImaxSession
	}
	return 0
}

func (x *GroupInfo) GetFuncSwitcher() *FuncSwitcherInfo {
	if x != nil {
		return x.FuncSwitcher
	}
	return nil
}

func (x *GroupInfo) GetRule() []*RuleInfo {
	if x != nil {
		return x.Rule
	}
	return nil
}

type GetRaltGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupList []*GroupInfo `protobuf:"bytes,1,rep,name=group_list,json=groupList,proto3" json:"group_list,omitempty"` //配置组列表
}

func (x *GetRaltGroupRsp) Reset() {
	*x = GetRaltGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaltGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaltGroupRsp) ProtoMessage() {}

func (x *GetRaltGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaltGroupRsp.ProtoReflect.Descriptor instead.
func (*GetRaltGroupRsp) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *GetRaltGroupRsp) GetGroupList() []*GroupInfo {
	if x != nil {
		return x.GroupList
	}
	return nil
}

type ProtocolMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrprotocolMapId string `protobuf:"bytes,1,opt,name=strprotocol_map_id,json=strprotocolMapId,proto3" json:"strprotocol_map_id,omitempty"` //源目标协议端口映射ID
	StrsrcProtocol   string `protobuf:"bytes,2,opt,name=strsrc_protocol,json=strsrcProtocol,proto3" json:"strsrc_protocol,omitempty"`         //源协议
	IsrcPort         int32  `protobuf:"varint,3,opt,name=isrc_port,json=isrcPort,proto3" json:"isrc_port,omitempty"`                          //源端口号
	StrdstProtocol   string `protobuf:"bytes,4,opt,name=strdst_protocol,json=strdstProtocol,proto3" json:"strdst_protocol,omitempty"`         //目标协议
	IdstPort         int32  `protobuf:"varint,5,opt,name=idst_port,json=idstPort,proto3" json:"idst_port,omitempty"`                          //目标端口号
}

func (x *ProtocolMap) Reset() {
	*x = ProtocolMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolMap) ProtoMessage() {}

func (x *ProtocolMap) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolMap.ProtoReflect.Descriptor instead.
func (*ProtocolMap) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *ProtocolMap) GetStrprotocolMapId() string {
	if x != nil {
		return x.StrprotocolMapId
	}
	return ""
}

func (x *ProtocolMap) GetStrsrcProtocol() string {
	if x != nil {
		return x.StrsrcProtocol
	}
	return ""
}

func (x *ProtocolMap) GetIsrcPort() int32 {
	if x != nil {
		return x.IsrcPort
	}
	return 0
}

func (x *ProtocolMap) GetStrdstProtocol() string {
	if x != nil {
		return x.StrdstProtocol
	}
	return ""
}

func (x *ProtocolMap) GetIdstPort() int32 {
	if x != nil {
		return x.IdstPort
	}
	return 0
}

type WebsiteReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrdomainId          string         `protobuf:"bytes,1,opt,name=strdomain_id,json=strdomainId,proto3" json:"strdomain_id,omitempty"` //域名ID
	StrgroupId           string         `protobuf:"bytes,2,opt,name=strgroup_id,json=strgroupId,proto3" json:"strgroup_id,omitempty"`
	StrsrcDomain         string         `protobuf:"bytes,3,opt,name=strsrc_domain,json=strsrcDomain,proto3" json:"strsrc_domain,omitempty"`                           //源站域名或IP
	StrdstDomain         string         `protobuf:"bytes,4,opt,name=strdst_domain,json=strdstDomain,proto3" json:"strdst_domain,omitempty"`                           //目标域名或IP
	StrsrcIpAddr         string         `protobuf:"bytes,5,opt,name=strsrc_ip_addr,json=strsrcIpAddr,proto3" json:"strsrc_ip_addr,omitempty"`                         //源站IP
	StripAddr            string         `protobuf:"bytes,6,opt,name=strip_addr,json=stripAddr,proto3" json:"strip_addr,omitempty"`                                    //升级地址，IPv6或IPv4地址
	ProtocolMap          []*ProtocolMap `protobuf:"bytes,7,rep,name=protocol_map,json=protocolMap,proto3" json:"protocol_map,omitempty"`                              //源目标协议端口映射
	StrwebsiteHrefDomain string         `protobuf:"bytes,8,opt,name=strwebsite_href_domain,json=strwebsiteHrefDomain,proto3" json:"strwebsite_href_domain,omitempty"` //网站配置外链域名
	I64Mod               int32          `protobuf:"varint,9,opt,name=i64mod,proto3" json:"i64mod,omitempty"`                                                          //1:ipv6到ipv4; 2:ipv4到ipv6；3：ipv4到ipv4；4：ipv6到ipv6
	Istatus              int32          `protobuf:"varint,10,opt,name=istatus,proto3" json:"istatus,omitempty"`
}

func (x *WebsiteReqInfo) Reset() {
	*x = WebsiteReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteReqInfo) ProtoMessage() {}

func (x *WebsiteReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteReqInfo.ProtoReflect.Descriptor instead.
func (*WebsiteReqInfo) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *WebsiteReqInfo) GetStrdomainId() string {
	if x != nil {
		return x.StrdomainId
	}
	return ""
}

func (x *WebsiteReqInfo) GetStrgroupId() string {
	if x != nil {
		return x.StrgroupId
	}
	return ""
}

func (x *WebsiteReqInfo) GetStrsrcDomain() string {
	if x != nil {
		return x.StrsrcDomain
	}
	return ""
}

func (x *WebsiteReqInfo) GetStrdstDomain() string {
	if x != nil {
		return x.StrdstDomain
	}
	return ""
}

func (x *WebsiteReqInfo) GetStrsrcIpAddr() string {
	if x != nil {
		return x.StrsrcIpAddr
	}
	return ""
}

func (x *WebsiteReqInfo) GetStripAddr() string {
	if x != nil {
		return x.StripAddr
	}
	return ""
}

func (x *WebsiteReqInfo) GetProtocolMap() []*ProtocolMap {
	if x != nil {
		return x.ProtocolMap
	}
	return nil
}

func (x *WebsiteReqInfo) GetStrwebsiteHrefDomain() string {
	if x != nil {
		return x.StrwebsiteHrefDomain
	}
	return ""
}

func (x *WebsiteReqInfo) GetI64Mod() int32 {
	if x != nil {
		return x.I64Mod
	}
	return 0
}

func (x *WebsiteReqInfo) GetIstatus() int32 {
	if x != nil {
		return x.Istatus
	}
	return 0
}

type OptRaltWebsiteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iopt    int32             `protobuf:"varint,1,opt,name=iopt,proto3" json:"iopt,omitempty"`
	Website []*WebsiteReqInfo `protobuf:"bytes,2,rep,name=website,proto3" json:"website,omitempty"`
}

func (x *OptRaltWebsiteReq) Reset() {
	*x = OptRaltWebsiteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptRaltWebsiteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptRaltWebsiteReq) ProtoMessage() {}

func (x *OptRaltWebsiteReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptRaltWebsiteReq.ProtoReflect.Descriptor instead.
func (*OptRaltWebsiteReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *OptRaltWebsiteReq) GetIopt() int32 {
	if x != nil {
		return x.Iopt
	}
	return 0
}

func (x *OptRaltWebsiteReq) GetWebsite() []*WebsiteReqInfo {
	if x != nil {
		return x.Website
	}
	return nil
}

type GetRaltWebsiteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrdomainId []string `protobuf:"bytes,1,rep,name=strdomain_id,json=strdomainId,proto3" json:"strdomain_id,omitempty"`
}

func (x *GetRaltWebsiteReq) Reset() {
	*x = GetRaltWebsiteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaltWebsiteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaltWebsiteReq) ProtoMessage() {}

func (x *GetRaltWebsiteReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaltWebsiteReq.ProtoReflect.Descriptor instead.
func (*GetRaltWebsiteReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{10}
}

func (x *GetRaltWebsiteReq) GetStrdomainId() []string {
	if x != nil {
		return x.StrdomainId
	}
	return nil
}

type WebsiteRspInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrdomainId  string         `protobuf:"bytes,1,opt,name=strdomain_id,json=strdomainId,proto3" json:"strdomain_id,omitempty"`
	StrgroupId   string         `protobuf:"bytes,2,opt,name=strgroup_id,json=strgroupId,proto3" json:"strgroup_id,omitempty"`
	Strdomain    string         `protobuf:"bytes,3,opt,name=strdomain,proto3" json:"strdomain,omitempty"`
	StrclusterId string         `protobuf:"bytes,4,opt,name=strcluster_id,json=strclusterId,proto3" json:"strcluster_id,omitempty"`
	StripAddr    string         `protobuf:"bytes,5,opt,name=strip_addr,json=stripAddr,proto3" json:"strip_addr,omitempty"`
	ProtocolMap  []*ProtocolMap `protobuf:"bytes,6,rep,name=protocol_map,json=protocolMap,proto3" json:"protocol_map,omitempty"`
}

func (x *WebsiteRspInfo) Reset() {
	*x = WebsiteRspInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteRspInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteRspInfo) ProtoMessage() {}

func (x *WebsiteRspInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteRspInfo.ProtoReflect.Descriptor instead.
func (*WebsiteRspInfo) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *WebsiteRspInfo) GetStrdomainId() string {
	if x != nil {
		return x.StrdomainId
	}
	return ""
}

func (x *WebsiteRspInfo) GetStrgroupId() string {
	if x != nil {
		return x.StrgroupId
	}
	return ""
}

func (x *WebsiteRspInfo) GetStrdomain() string {
	if x != nil {
		return x.Strdomain
	}
	return ""
}

func (x *WebsiteRspInfo) GetStrclusterId() string {
	if x != nil {
		return x.StrclusterId
	}
	return ""
}

func (x *WebsiteRspInfo) GetStripAddr() string {
	if x != nil {
		return x.StripAddr
	}
	return ""
}

func (x *WebsiteRspInfo) GetProtocolMap() []*ProtocolMap {
	if x != nil {
		return x.ProtocolMap
	}
	return nil
}

type GetRaltWebsiteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Website []*WebsiteRspInfo `protobuf:"bytes,1,rep,name=website,proto3" json:"website,omitempty"`
}

func (x *GetRaltWebsiteRsp) Reset() {
	*x = GetRaltWebsiteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaltWebsiteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaltWebsiteRsp) ProtoMessage() {}

func (x *GetRaltWebsiteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaltWebsiteRsp.ProtoReflect.Descriptor instead.
func (*GetRaltWebsiteRsp) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{12}
}

func (x *GetRaltWebsiteRsp) GetWebsite() []*WebsiteRspInfo {
	if x != nil {
		return x.Website
	}
	return nil
}

type GetRaltSpecWebsiteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrdomainId string `protobuf:"bytes,1,opt,name=strdomain_id,json=strdomainId,proto3" json:"strdomain_id,omitempty"` //指定返回
}

func (x *GetRaltSpecWebsiteReq) Reset() {
	*x = GetRaltSpecWebsiteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaltSpecWebsiteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaltSpecWebsiteReq) ProtoMessage() {}

func (x *GetRaltSpecWebsiteReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaltSpecWebsiteReq.ProtoReflect.Descriptor instead.
func (*GetRaltSpecWebsiteReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{13}
}

func (x *GetRaltSpecWebsiteReq) GetStrdomainId() string {
	if x != nil {
		return x.StrdomainId
	}
	return ""
}

type GetRaltSpecWebsiteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Website []*WebsiteReqInfo `protobuf:"bytes,1,rep,name=website,proto3" json:"website,omitempty"`
}

func (x *GetRaltSpecWebsiteRsp) Reset() {
	*x = GetRaltSpecWebsiteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaltSpecWebsiteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaltSpecWebsiteRsp) ProtoMessage() {}

func (x *GetRaltSpecWebsiteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaltSpecWebsiteRsp.ProtoReflect.Descriptor instead.
func (*GetRaltSpecWebsiteRsp) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{14}
}

func (x *GetRaltSpecWebsiteRsp) GetWebsite() []*WebsiteReqInfo {
	if x != nil {
		return x.Website
	}
	return nil
}

type IPBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StripAddrStart string `protobuf:"bytes,1,opt,name=strip_addr_start,json=stripAddrStart,proto3" json:"strip_addr_start,omitempty"` //起始地址
	StripAddrEnd   string `protobuf:"bytes,2,opt,name=strip_addr_end,json=stripAddrEnd,proto3" json:"strip_addr_end,omitempty"`       //结束地址
	IipPrefix      int32  `protobuf:"varint,3,opt,name=iip_prefix,json=iipPrefix,proto3" json:"iip_prefix,omitempty"`                 //前缀（长度）
}

func (x *IPBlock) Reset() {
	*x = IPBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPBlock) ProtoMessage() {}

func (x *IPBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPBlock.ProtoReflect.Descriptor instead.
func (*IPBlock) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{15}
}

func (x *IPBlock) GetStripAddrStart() string {
	if x != nil {
		return x.StripAddrStart
	}
	return ""
}

func (x *IPBlock) GetStripAddrEnd() string {
	if x != nil {
		return x.StripAddrEnd
	}
	return ""
}

func (x *IPBlock) GetIipPrefix() int32 {
	if x != nil {
		return x.IipPrefix
	}
	return 0
}

type GetAvailIPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrclusterId string `protobuf:"bytes,1,opt,name=strcluster_id,json=strclusterId,proto3" json:"strcluster_id,omitempty"`
	Network      int32  `protobuf:"varint,2,opt,name=network,proto3" json:"network,omitempty"` //1表示ipv6, 2表示ipv4
	Count        int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`     //查询的总数,默认值5个
}

func (x *GetAvailIPReq) Reset() {
	*x = GetAvailIPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailIPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailIPReq) ProtoMessage() {}

func (x *GetAvailIPReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailIPReq.ProtoReflect.Descriptor instead.
func (*GetAvailIPReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{16}
}

func (x *GetAvailIPReq) GetStrclusterId() string {
	if x != nil {
		return x.StrclusterId
	}
	return ""
}

func (x *GetAvailIPReq) GetNetwork() int32 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *GetAvailIPReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetAvailIPRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip []string `protobuf:"bytes,1,rep,name=ip,proto3" json:"ip,omitempty"` //可用地址
}

func (x *GetAvailIPRsp) Reset() {
	*x = GetAvailIPRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailIPRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailIPRsp) ProtoMessage() {}

func (x *GetAvailIPRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailIPRsp.ProtoReflect.Descriptor instead.
func (*GetAvailIPRsp) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{17}
}

func (x *GetAvailIPRsp) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

type UploadCertPriKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrdomainId     string `protobuf:"bytes,1,opt,name=strdomain_id,json=strdomainId,proto3" json:"strdomain_id,omitempty"`
	StrcertFname    string `protobuf:"bytes,2,opt,name=strcert_fname,json=strcertFname,proto3" json:"strcert_fname,omitempty"`          //证书文件名
	CzcertContent   []byte `protobuf:"bytes,3,opt,name=czcert_content,json=czcertContent,proto3" json:"czcert_content,omitempty"`       //证书文件内容
	StrprikeyFname  string `protobuf:"bytes,4,opt,name=strprikey_fname,json=strprikeyFname,proto3" json:"strprikey_fname,omitempty"`    //私钥文件名
	CzprikeyContent []byte `protobuf:"bytes,5,opt,name=czprikey_content,json=czprikeyContent,proto3" json:"czprikey_content,omitempty"` //私钥文件内容
}

func (x *UploadCertPriKeyReq) Reset() {
	*x = UploadCertPriKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCertPriKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCertPriKeyReq) ProtoMessage() {}

func (x *UploadCertPriKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCertPriKeyReq.ProtoReflect.Descriptor instead.
func (*UploadCertPriKeyReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{18}
}

func (x *UploadCertPriKeyReq) GetStrdomainId() string {
	if x != nil {
		return x.StrdomainId
	}
	return ""
}

func (x *UploadCertPriKeyReq) GetStrcertFname() string {
	if x != nil {
		return x.StrcertFname
	}
	return ""
}

func (x *UploadCertPriKeyReq) GetCzcertContent() []byte {
	if x != nil {
		return x.CzcertContent
	}
	return nil
}

func (x *UploadCertPriKeyReq) GetStrprikeyFname() string {
	if x != nil {
		return x.StrprikeyFname
	}
	return ""
}

func (x *UploadCertPriKeyReq) GetCzprikeyContent() []byte {
	if x != nil {
		return x.CzprikeyContent
	}
	return nil
}

type RemoveCertPriKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrdomainId string `protobuf:"bytes,1,opt,name=strdomain_id,json=strdomainId,proto3" json:"strdomain_id,omitempty"`
}

func (x *RemoveCertPriKeyReq) Reset() {
	*x = RemoveCertPriKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCertPriKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCertPriKeyReq) ProtoMessage() {}

func (x *RemoveCertPriKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCertPriKeyReq.ProtoReflect.Descriptor instead.
func (*RemoveCertPriKeyReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveCertPriKeyReq) GetStrdomainId() string {
	if x != nil {
		return x.StrdomainId
	}
	return ""
}

type GetCertPriKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrdomainId string `protobuf:"bytes,1,opt,name=strdomain_id,json=strdomainId,proto3" json:"strdomain_id,omitempty"`
}

func (x *GetCertPriKeyReq) Reset() {
	*x = GetCertPriKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertPriKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertPriKeyReq) ProtoMessage() {}

func (x *GetCertPriKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertPriKeyReq.ProtoReflect.Descriptor instead.
func (*GetCertPriKeyReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{20}
}

func (x *GetCertPriKeyReq) GetStrdomainId() string {
	if x != nil {
		return x.StrdomainId
	}
	return ""
}

type GetCertPriKeyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrcertFname   string `protobuf:"bytes,2,opt,name=strcert_fname,json=strcertFname,proto3" json:"strcert_fname,omitempty"`       //证书文件名
	StrprikeyFname string `protobuf:"bytes,4,opt,name=strprikey_fname,json=strprikeyFname,proto3" json:"strprikey_fname,omitempty"` //私钥文件名
}

func (x *GetCertPriKeyRsp) Reset() {
	*x = GetCertPriKeyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertPriKeyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertPriKeyRsp) ProtoMessage() {}

func (x *GetCertPriKeyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertPriKeyRsp.ProtoReflect.Descriptor instead.
func (*GetCertPriKeyRsp) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{21}
}

func (x *GetCertPriKeyRsp) GetStrcertFname() string {
	if x != nil {
		return x.StrcertFname
	}
	return ""
}

func (x *GetCertPriKeyRsp) GetStrprikeyFname() string {
	if x != nil {
		return x.StrprikeyFname
	}
	return ""
}

type FuncSwitcherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreplaceHref       bool   `protobuf:"varint,1,opt,name=breplace_href,json=breplaceHref,proto3" json:"breplace_href,omitempty"`                     //是否升级外链
	BhttpsToHttp       bool   `protobuf:"varint,2,opt,name=bhttps_to_http,json=bhttpsToHttp,proto3" json:"bhttps_to_http,omitempty"`                   //https外链翻译成http模式
	BcheckInet6Support bool   `protobuf:"varint,3,opt,name=bcheck_inet6_support,json=bcheckInet6Support,proto3" json:"bcheck_inet6_support,omitempty"` //ipv6支持度检测
	Binet6Cache        bool   `protobuf:"varint,4,opt,name=binet6_cache,json=binet6Cache,proto3" json:"binet6_cache,omitempty"`                        //ipv6缓存加速
	StriconUrl         string `protobuf:"bytes,5,opt,name=stricon_url,json=striconUrl,proto3" json:"stricon_url,omitempty"`                            //图标路径
}

func (x *FuncSwitcherInfo) Reset() {
	*x = FuncSwitcherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncSwitcherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncSwitcherInfo) ProtoMessage() {}

func (x *FuncSwitcherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncSwitcherInfo.ProtoReflect.Descriptor instead.
func (*FuncSwitcherInfo) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{22}
}

func (x *FuncSwitcherInfo) GetBreplaceHref() bool {
	if x != nil {
		return x.BreplaceHref
	}
	return false
}

func (x *FuncSwitcherInfo) GetBhttpsToHttp() bool {
	if x != nil {
		return x.BhttpsToHttp
	}
	return false
}

func (x *FuncSwitcherInfo) GetBcheckInet6Support() bool {
	if x != nil {
		return x.BcheckInet6Support
	}
	return false
}

func (x *FuncSwitcherInfo) GetBinet6Cache() bool {
	if x != nil {
		return x.Binet6Cache
	}
	return false
}

func (x *FuncSwitcherInfo) GetStriconUrl() string {
	if x != nil {
		return x.StriconUrl
	}
	return ""
}

type RuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrruleId    string `protobuf:"bytes,1,opt,name=strrule_id,json=strruleId,proto3" json:"strrule_id,omitempty"`           //规则ID
	IruleType    int32  `protobuf:"varint,2,opt,name=irule_type,json=iruleType,proto3" json:"irule_type,omitempty"`          //规则类型
	IruleSubtype int32  `protobuf:"varint,3,opt,name=irule_subtype,json=iruleSubtype,proto3" json:"irule_subtype,omitempty"` //规则子类型
	Strsearch    string `protobuf:"bytes,4,opt,name=strsearch,proto3" json:"strsearch,omitempty"`                            //规则搜索串
	Strreplace   string `protobuf:"bytes,5,opt,name=strreplace,proto3" json:"strreplace,omitempty"`                          //规则替换串
}

func (x *RuleInfo) Reset() {
	*x = RuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleInfo) ProtoMessage() {}

func (x *RuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleInfo.ProtoReflect.Descriptor instead.
func (*RuleInfo) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{23}
}

func (x *RuleInfo) GetStrruleId() string {
	if x != nil {
		return x.StrruleId
	}
	return ""
}

func (x *RuleInfo) GetIruleType() int32 {
	if x != nil {
		return x.IruleType
	}
	return 0
}

func (x *RuleInfo) GetIruleSubtype() int32 {
	if x != nil {
		return x.IruleSubtype
	}
	return 0
}

func (x *RuleInfo) GetStrsearch() string {
	if x != nil {
		return x.Strsearch
	}
	return ""
}

func (x *RuleInfo) GetStrreplace() string {
	if x != nil {
		return x.Strreplace
	}
	return ""
}

type SuspendWebsiteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrdomainId string `protobuf:"bytes,1,opt,name=strdomain_id,json=strdomainId,proto3" json:"strdomain_id,omitempty"`
	Istatus     int32  `protobuf:"varint,2,opt,name=istatus,proto3" json:"istatus,omitempty"`
}

func (x *SuspendWebsiteReq) Reset() {
	*x = SuspendWebsiteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendWebsiteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendWebsiteReq) ProtoMessage() {}

func (x *SuspendWebsiteReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendWebsiteReq.ProtoReflect.Descriptor instead.
func (*SuspendWebsiteReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{24}
}

func (x *SuspendWebsiteReq) GetStrdomainId() string {
	if x != nil {
		return x.StrdomainId
	}
	return ""
}

func (x *SuspendWebsiteReq) GetIstatus() int32 {
	if x != nil {
		return x.Istatus
	}
	return 0
}

type MyTestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strmytest string `protobuf:"bytes,1,opt,name=strmytest,proto3" json:"strmytest,omitempty"`
}

func (x *MyTestReq) Reset() {
	*x = MyTestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyTestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyTestReq) ProtoMessage() {}

func (x *MyTestReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyTestReq.ProtoReflect.Descriptor instead.
func (*MyTestReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{25}
}

func (x *MyTestReq) GetStrmytest() string {
	if x != nil {
		return x.Strmytest
	}
	return ""
}

type GetRaltGroupWebsiteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrgroupId string `protobuf:"bytes,1,opt,name=strgroup_id,json=strgroupId,proto3" json:"strgroup_id,omitempty"`
}

func (x *GetRaltGroupWebsiteReq) Reset() {
	*x = GetRaltGroupWebsiteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaltGroupWebsiteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaltGroupWebsiteReq) ProtoMessage() {}

func (x *GetRaltGroupWebsiteReq) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaltGroupWebsiteReq.ProtoReflect.Descriptor instead.
func (*GetRaltGroupWebsiteReq) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{26}
}

func (x *GetRaltGroupWebsiteReq) GetStrgroupId() string {
	if x != nil {
		return x.StrgroupId
	}
	return ""
}

type GetRaltGroupWebsiteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Website []*WebsiteReqInfo `protobuf:"bytes,1,rep,name=website,proto3" json:"website,omitempty"`
}

func (x *GetRaltGroupWebsiteRsp) Reset() {
	*x = GetRaltGroupWebsiteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ralt_plugin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaltGroupWebsiteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaltGroupWebsiteRsp) ProtoMessage() {}

func (x *GetRaltGroupWebsiteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ralt_plugin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaltGroupWebsiteRsp.ProtoReflect.Descriptor instead.
func (*GetRaltGroupWebsiteRsp) Descriptor() ([]byte, []int) {
	return file_ralt_plugin_proto_rawDescGZIP(), []int{27}
}

func (x *GetRaltGroupWebsiteRsp) GetWebsite() []*WebsiteReqInfo {
	if x != nil {
		return x.Website
	}
	return nil
}

var File_ralt_plugin_proto protoreflect.FileDescriptor

var file_ralt_plugin_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x61, 0x6c, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x63, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x0c, 0x0a, 0x0a, 0x4e, 0x55,
	0x4c, 0x4c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x22, 0x0a, 0x0a, 0x08, 0x4e, 0x6f, 0x41, 0x72,
	0x67, 0x52, 0x65, 0x71, 0x22, 0xab, 0x03, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x52, 0x61, 0x6c, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68,
	0x72, 0x65, 0x66, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x72, 0x65, 0x66, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x74, 0x72, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x72, 0x65, 0x66, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x63, 0x73,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x63, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x22, 0x32, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xb4, 0x03, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x72, 0x65, 0x66, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x73,
	0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x72, 0x65, 0x66, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x75,
	0x6e, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x40, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x2d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xc7, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x72, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x73, 0x72, 0x63, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x64, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x69, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x80, 0x03, 0x0a, 0x0e, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x73, 0x72, 0x63, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x64, 0x73, 0x74, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x64, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x33, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x72, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x48, 0x72, 0x65, 0x66, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x36,
	0x34, 0x6d, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x36, 0x34, 0x6d,
	0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x11,
	0x4f, 0x70, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x69, 0x6f, 0x70, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a,
	0x0e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x63,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x22, 0x42, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6c, 0x74, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x2d, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x73,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x22, 0x3a,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x53, 0x70, 0x65, 0x63, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6c, 0x74, 0x53, 0x70, 0x65, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x22, 0x78, 0x0a, 0x07, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x64, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x49, 0x50, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x49, 0x50,
	0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0xd8, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x63, 0x65, 0x72, 0x74, 0x46, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x7a, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x7a, 0x63,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74,
	0x72, 0x70, 0x72, 0x69, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x70, 0x72, 0x69, 0x6b, 0x65, 0x79, 0x46, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x7a, 0x70, 0x72, 0x69, 0x6b, 0x65, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63,
	0x7a, 0x70, 0x72, 0x69, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x38,
	0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79,
	0x52, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x63,
	0x65, 0x72, 0x74, 0x46, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x70,
	0x72, 0x69, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x70, 0x72, 0x69, 0x6b, 0x65, 0x79, 0x46, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xd3, 0x01, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x48, 0x72, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x62,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x68, 0x74, 0x74, 0x70, 0x73, 0x54, 0x6f, 0x48, 0x74, 0x74,
	0x70, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x65, 0x74,
	0x36, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x62, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x65, 0x74,
	0x36, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xab, 0x01, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x72, 0x75, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x11, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x69, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x0a, 0x09, 0x4d, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x6d, 0x79, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x6d, 0x79, 0x74, 0x65,
	0x73, 0x74, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x32, 0x9e, 0x06, 0x0a, 0x0c, 0x52, 0x61, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x53, 0x65, 0x72, 0x76, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x52, 0x61,
	0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x4f, 0x70,
	0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x72, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x14, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x67,
	0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x16, 0x2e,
	0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6c, 0x74, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x53, 0x70, 0x65, 0x63, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6c, 0x74, 0x53, 0x70, 0x65, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x49,
	0x50, 0x12, 0x12, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x49, 0x50, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x49, 0x50, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x14, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x6c, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x18, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x72, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x6c, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x2e, 0x72, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50,
	0x72, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x72,
	0x63, 0x73, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x4d, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x72, 0x63,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x72, 0x63, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x72, 0x63,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ralt_plugin_proto_rawDescOnce sync.Once
	file_ralt_plugin_proto_rawDescData = file_ralt_plugin_proto_rawDesc
)

func file_ralt_plugin_proto_rawDescGZIP() []byte {
	file_ralt_plugin_proto_rawDescOnce.Do(func() {
		file_ralt_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_ralt_plugin_proto_rawDescData)
	})
	return file_ralt_plugin_proto_rawDescData
}

var file_ralt_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_ralt_plugin_proto_goTypes = []interface{}{
	(*OperResult)(nil),             // 0: rcs.OperResult
	(*NULLMsgReq)(nil),             // 1: rcs.NULLMsgReq
	(*NoArgReq)(nil),               // 2: rcs.NoArgReq
	(*OptRaltGroupReq)(nil),        // 3: rcs.OptRaltGroupReq
	(*GetRaltGroupReq)(nil),        // 4: rcs.GetRaltGroupReq
	(*GroupInfo)(nil),              // 5: rcs.GroupInfo
	(*GetRaltGroupRsp)(nil),        // 6: rcs.GetRaltGroupRsp
	(*ProtocolMap)(nil),            // 7: rcs.ProtocolMap
	(*WebsiteReqInfo)(nil),         // 8: rcs.WebsiteReqInfo
	(*OptRaltWebsiteReq)(nil),      // 9: rcs.OptRaltWebsiteReq
	(*GetRaltWebsiteReq)(nil),      // 10: rcs.GetRaltWebsiteReq
	(*WebsiteRspInfo)(nil),         // 11: rcs.WebsiteRspInfo
	(*GetRaltWebsiteRsp)(nil),      // 12: rcs.GetRaltWebsiteRsp
	(*GetRaltSpecWebsiteReq)(nil),  // 13: rcs.GetRaltSpecWebsiteReq
	(*GetRaltSpecWebsiteRsp)(nil),  // 14: rcs.GetRaltSpecWebsiteRsp
	(*IPBlock)(nil),                // 15: rcs.IPBlock
	(*GetAvailIPReq)(nil),          // 16: rcs.GetAvailIPReq
	(*GetAvailIPRsp)(nil),          // 17: rcs.GetAvailIPRsp
	(*UploadCertPriKeyReq)(nil),    // 18: rcs.UploadCertPriKeyReq
	(*RemoveCertPriKeyReq)(nil),    // 19: rcs.RemoveCertPriKeyReq
	(*GetCertPriKeyReq)(nil),       // 20: rcs.GetCertPriKeyReq
	(*GetCertPriKeyRsp)(nil),       // 21: rcs.GetCertPriKeyRsp
	(*FuncSwitcherInfo)(nil),       // 22: rcs.FuncSwitcherInfo
	(*RuleInfo)(nil),               // 23: rcs.RuleInfo
	(*SuspendWebsiteReq)(nil),      // 24: rcs.SuspendWebsiteReq
	(*MyTestReq)(nil),              // 25: rcs.MyTestReq
	(*GetRaltGroupWebsiteReq)(nil), // 26: rcs.GetRaltGroupWebsiteReq
	(*GetRaltGroupWebsiteRsp)(nil), // 27: rcs.GetRaltGroupWebsiteRsp
}
var file_ralt_plugin_proto_depIdxs = []int32{
	22, // 0: rcs.OptRaltGroupReq.func_switcher:type_name -> rcs.FuncSwitcherInfo
	23, // 1: rcs.OptRaltGroupReq.rule:type_name -> rcs.RuleInfo
	22, // 2: rcs.GroupInfo.func_switcher:type_name -> rcs.FuncSwitcherInfo
	23, // 3: rcs.GroupInfo.rule:type_name -> rcs.RuleInfo
	5,  // 4: rcs.GetRaltGroupRsp.group_list:type_name -> rcs.GroupInfo
	7,  // 5: rcs.WebsiteReqInfo.protocol_map:type_name -> rcs.ProtocolMap
	8,  // 6: rcs.OptRaltWebsiteReq.website:type_name -> rcs.WebsiteReqInfo
	7,  // 7: rcs.WebsiteRspInfo.protocol_map:type_name -> rcs.ProtocolMap
	11, // 8: rcs.GetRaltWebsiteRsp.website:type_name -> rcs.WebsiteRspInfo
	8,  // 9: rcs.GetRaltSpecWebsiteRsp.website:type_name -> rcs.WebsiteReqInfo
	8,  // 10: rcs.GetRaltGroupWebsiteRsp.website:type_name -> rcs.WebsiteReqInfo
	3,  // 11: rcs.RaltConfServ.optRaltGroup:input_type -> rcs.OptRaltGroupReq
	4,  // 12: rcs.RaltConfServ.getRaltGroup:input_type -> rcs.GetRaltGroupReq
	9,  // 13: rcs.RaltConfServ.optRaltWebsite:input_type -> rcs.OptRaltWebsiteReq
	10, // 14: rcs.RaltConfServ.getRaltWebsite:input_type -> rcs.GetRaltWebsiteReq
	13, // 15: rcs.RaltConfServ.getRaltSpecWebsite:input_type -> rcs.GetRaltSpecWebsiteReq
	16, // 16: rcs.RaltConfServ.getRaltAvailIP:input_type -> rcs.GetAvailIPReq
	18, // 17: rcs.RaltConfServ.uploadRaltCertPriKey:input_type -> rcs.UploadCertPriKeyReq
	19, // 18: rcs.RaltConfServ.removeRaltCertPriKey:input_type -> rcs.RemoveCertPriKeyReq
	20, // 19: rcs.RaltConfServ.getRaltCertPriKey:input_type -> rcs.GetCertPriKeyReq
	24, // 20: rcs.RaltConfServ.suspendWebsite:input_type -> rcs.SuspendWebsiteReq
	25, // 21: rcs.RaltConfServ.myTest:input_type -> rcs.MyTestReq
	26, // 22: rcs.RaltConfServ.getRaltGroupWebsite:input_type -> rcs.GetRaltGroupWebsiteReq
	0,  // 23: rcs.RaltConfServ.optRaltGroup:output_type -> rcs.OperResult
	6,  // 24: rcs.RaltConfServ.getRaltGroup:output_type -> rcs.GetRaltGroupRsp
	0,  // 25: rcs.RaltConfServ.optRaltWebsite:output_type -> rcs.OperResult
	12, // 26: rcs.RaltConfServ.getRaltWebsite:output_type -> rcs.GetRaltWebsiteRsp
	14, // 27: rcs.RaltConfServ.getRaltSpecWebsite:output_type -> rcs.GetRaltSpecWebsiteRsp
	17, // 28: rcs.RaltConfServ.getRaltAvailIP:output_type -> rcs.GetAvailIPRsp
	0,  // 29: rcs.RaltConfServ.uploadRaltCertPriKey:output_type -> rcs.OperResult
	0,  // 30: rcs.RaltConfServ.removeRaltCertPriKey:output_type -> rcs.OperResult
	21, // 31: rcs.RaltConfServ.getRaltCertPriKey:output_type -> rcs.GetCertPriKeyRsp
	0,  // 32: rcs.RaltConfServ.suspendWebsite:output_type -> rcs.OperResult
	0,  // 33: rcs.RaltConfServ.myTest:output_type -> rcs.OperResult
	27, // 34: rcs.RaltConfServ.getRaltGroupWebsite:output_type -> rcs.GetRaltGroupWebsiteRsp
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_ralt_plugin_proto_init() }
func file_ralt_plugin_proto_init() {
	if File_ralt_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ralt_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NULLMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoArgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptRaltGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaltGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaltGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptRaltWebsiteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaltWebsiteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteRspInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaltWebsiteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaltSpecWebsiteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaltSpecWebsiteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailIPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailIPRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCertPriKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCertPriKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertPriKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertPriKeyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncSwitcherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendWebsiteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyTestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaltGroupWebsiteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ralt_plugin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaltGroupWebsiteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ralt_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ralt_plugin_proto_goTypes,
		DependencyIndexes: file_ralt_plugin_proto_depIdxs,
		MessageInfos:      file_ralt_plugin_proto_msgTypes,
	}.Build()
	File_ralt_plugin_proto = out.File
	file_ralt_plugin_proto_rawDesc = nil
	file_ralt_plugin_proto_goTypes = nil
	file_ralt_plugin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaltConfServClient is the client API for RaltConfServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaltConfServClient interface {
	OptRaltGroup(ctx context.Context, in *OptRaltGroupReq, opts ...grpc.CallOption) (*OperResult, error)
	GetRaltGroup(ctx context.Context, in *GetRaltGroupReq, opts ...grpc.CallOption) (*GetRaltGroupRsp, error)
	OptRaltWebsite(ctx context.Context, in *OptRaltWebsiteReq, opts ...grpc.CallOption) (*OperResult, error)
	GetRaltWebsite(ctx context.Context, in *GetRaltWebsiteReq, opts ...grpc.CallOption) (*GetRaltWebsiteRsp, error)
	GetRaltSpecWebsite(ctx context.Context, in *GetRaltSpecWebsiteReq, opts ...grpc.CallOption) (*GetRaltSpecWebsiteRsp, error)
	GetRaltAvailIP(ctx context.Context, in *GetAvailIPReq, opts ...grpc.CallOption) (*GetAvailIPRsp, error)
	UploadRaltCertPriKey(ctx context.Context, in *UploadCertPriKeyReq, opts ...grpc.CallOption) (*OperResult, error)
	RemoveRaltCertPriKey(ctx context.Context, in *RemoveCertPriKeyReq, opts ...grpc.CallOption) (*OperResult, error)
	GetRaltCertPriKey(ctx context.Context, in *GetCertPriKeyReq, opts ...grpc.CallOption) (*GetCertPriKeyRsp, error)
	SuspendWebsite(ctx context.Context, in *SuspendWebsiteReq, opts ...grpc.CallOption) (*OperResult, error)
	MyTest(ctx context.Context, in *MyTestReq, opts ...grpc.CallOption) (*OperResult, error)
	GetRaltGroupWebsite(ctx context.Context, in *GetRaltGroupWebsiteReq, opts ...grpc.CallOption) (*GetRaltGroupWebsiteRsp, error)
}

type raltConfServClient struct {
	cc grpc.ClientConnInterface
}

func NewRaltConfServClient(cc grpc.ClientConnInterface) RaltConfServClient {
	return &raltConfServClient{cc}
}

func (c *raltConfServClient) OptRaltGroup(ctx context.Context, in *OptRaltGroupReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/optRaltGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) GetRaltGroup(ctx context.Context, in *GetRaltGroupReq, opts ...grpc.CallOption) (*GetRaltGroupRsp, error) {
	out := new(GetRaltGroupRsp)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/getRaltGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) OptRaltWebsite(ctx context.Context, in *OptRaltWebsiteReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/optRaltWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) GetRaltWebsite(ctx context.Context, in *GetRaltWebsiteReq, opts ...grpc.CallOption) (*GetRaltWebsiteRsp, error) {
	out := new(GetRaltWebsiteRsp)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/getRaltWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) GetRaltSpecWebsite(ctx context.Context, in *GetRaltSpecWebsiteReq, opts ...grpc.CallOption) (*GetRaltSpecWebsiteRsp, error) {
	out := new(GetRaltSpecWebsiteRsp)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/getRaltSpecWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) GetRaltAvailIP(ctx context.Context, in *GetAvailIPReq, opts ...grpc.CallOption) (*GetAvailIPRsp, error) {
	out := new(GetAvailIPRsp)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/getRaltAvailIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) UploadRaltCertPriKey(ctx context.Context, in *UploadCertPriKeyReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/uploadRaltCertPriKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) RemoveRaltCertPriKey(ctx context.Context, in *RemoveCertPriKeyReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/removeRaltCertPriKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) GetRaltCertPriKey(ctx context.Context, in *GetCertPriKeyReq, opts ...grpc.CallOption) (*GetCertPriKeyRsp, error) {
	out := new(GetCertPriKeyRsp)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/getRaltCertPriKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) SuspendWebsite(ctx context.Context, in *SuspendWebsiteReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/suspendWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) MyTest(ctx context.Context, in *MyTestReq, opts ...grpc.CallOption) (*OperResult, error) {
	out := new(OperResult)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/myTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raltConfServClient) GetRaltGroupWebsite(ctx context.Context, in *GetRaltGroupWebsiteReq, opts ...grpc.CallOption) (*GetRaltGroupWebsiteRsp, error) {
	out := new(GetRaltGroupWebsiteRsp)
	err := c.cc.Invoke(ctx, "/rcs.RaltConfServ/getRaltGroupWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaltConfServServer is the server API for RaltConfServ service.
type RaltConfServServer interface {
	OptRaltGroup(context.Context, *OptRaltGroupReq) (*OperResult, error)
	GetRaltGroup(context.Context, *GetRaltGroupReq) (*GetRaltGroupRsp, error)
	OptRaltWebsite(context.Context, *OptRaltWebsiteReq) (*OperResult, error)
	GetRaltWebsite(context.Context, *GetRaltWebsiteReq) (*GetRaltWebsiteRsp, error)
	GetRaltSpecWebsite(context.Context, *GetRaltSpecWebsiteReq) (*GetRaltSpecWebsiteRsp, error)
	GetRaltAvailIP(context.Context, *GetAvailIPReq) (*GetAvailIPRsp, error)
	UploadRaltCertPriKey(context.Context, *UploadCertPriKeyReq) (*OperResult, error)
	RemoveRaltCertPriKey(context.Context, *RemoveCertPriKeyReq) (*OperResult, error)
	GetRaltCertPriKey(context.Context, *GetCertPriKeyReq) (*GetCertPriKeyRsp, error)
	SuspendWebsite(context.Context, *SuspendWebsiteReq) (*OperResult, error)
	MyTest(context.Context, *MyTestReq) (*OperResult, error)
	GetRaltGroupWebsite(context.Context, *GetRaltGroupWebsiteReq) (*GetRaltGroupWebsiteRsp, error)
}

// UnimplementedRaltConfServServer can be embedded to have forward compatible implementations.
type UnimplementedRaltConfServServer struct {
}

func (*UnimplementedRaltConfServServer) OptRaltGroup(context.Context, *OptRaltGroupReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptRaltGroup not implemented")
}
func (*UnimplementedRaltConfServServer) GetRaltGroup(context.Context, *GetRaltGroupReq) (*GetRaltGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaltGroup not implemented")
}
func (*UnimplementedRaltConfServServer) OptRaltWebsite(context.Context, *OptRaltWebsiteReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptRaltWebsite not implemented")
}
func (*UnimplementedRaltConfServServer) GetRaltWebsite(context.Context, *GetRaltWebsiteReq) (*GetRaltWebsiteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaltWebsite not implemented")
}
func (*UnimplementedRaltConfServServer) GetRaltSpecWebsite(context.Context, *GetRaltSpecWebsiteReq) (*GetRaltSpecWebsiteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaltSpecWebsite not implemented")
}
func (*UnimplementedRaltConfServServer) GetRaltAvailIP(context.Context, *GetAvailIPReq) (*GetAvailIPRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaltAvailIP not implemented")
}
func (*UnimplementedRaltConfServServer) UploadRaltCertPriKey(context.Context, *UploadCertPriKeyReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRaltCertPriKey not implemented")
}
func (*UnimplementedRaltConfServServer) RemoveRaltCertPriKey(context.Context, *RemoveCertPriKeyReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRaltCertPriKey not implemented")
}
func (*UnimplementedRaltConfServServer) GetRaltCertPriKey(context.Context, *GetCertPriKeyReq) (*GetCertPriKeyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaltCertPriKey not implemented")
}
func (*UnimplementedRaltConfServServer) SuspendWebsite(context.Context, *SuspendWebsiteReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendWebsite not implemented")
}
func (*UnimplementedRaltConfServServer) MyTest(context.Context, *MyTestReq) (*OperResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyTest not implemented")
}
func (*UnimplementedRaltConfServServer) GetRaltGroupWebsite(context.Context, *GetRaltGroupWebsiteReq) (*GetRaltGroupWebsiteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaltGroupWebsite not implemented")
}

func RegisterRaltConfServServer(s *grpc.Server, srv RaltConfServServer) {
	s.RegisterService(&_RaltConfServ_serviceDesc, srv)
}

func _RaltConfServ_OptRaltGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRaltGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).OptRaltGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/OptRaltGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).OptRaltGroup(ctx, req.(*OptRaltGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_GetRaltGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaltGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).GetRaltGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/GetRaltGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).GetRaltGroup(ctx, req.(*GetRaltGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_OptRaltWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRaltWebsiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).OptRaltWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/OptRaltWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).OptRaltWebsite(ctx, req.(*OptRaltWebsiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_GetRaltWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaltWebsiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).GetRaltWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/GetRaltWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).GetRaltWebsite(ctx, req.(*GetRaltWebsiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_GetRaltSpecWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaltSpecWebsiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).GetRaltSpecWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/GetRaltSpecWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).GetRaltSpecWebsite(ctx, req.(*GetRaltSpecWebsiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_GetRaltAvailIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).GetRaltAvailIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/GetRaltAvailIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).GetRaltAvailIP(ctx, req.(*GetAvailIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_UploadRaltCertPriKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCertPriKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).UploadRaltCertPriKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/UploadRaltCertPriKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).UploadRaltCertPriKey(ctx, req.(*UploadCertPriKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_RemoveRaltCertPriKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCertPriKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).RemoveRaltCertPriKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/RemoveRaltCertPriKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).RemoveRaltCertPriKey(ctx, req.(*RemoveCertPriKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_GetRaltCertPriKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertPriKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).GetRaltCertPriKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/GetRaltCertPriKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).GetRaltCertPriKey(ctx, req.(*GetCertPriKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_SuspendWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendWebsiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).SuspendWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/SuspendWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).SuspendWebsite(ctx, req.(*SuspendWebsiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_MyTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).MyTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/MyTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).MyTest(ctx, req.(*MyTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaltConfServ_GetRaltGroupWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaltGroupWebsiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaltConfServServer).GetRaltGroupWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcs.RaltConfServ/GetRaltGroupWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaltConfServServer).GetRaltGroupWebsite(ctx, req.(*GetRaltGroupWebsiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaltConfServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rcs.RaltConfServ",
	HandlerType: (*RaltConfServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "optRaltGroup",
			Handler:    _RaltConfServ_OptRaltGroup_Handler,
		},
		{
			MethodName: "getRaltGroup",
			Handler:    _RaltConfServ_GetRaltGroup_Handler,
		},
		{
			MethodName: "optRaltWebsite",
			Handler:    _RaltConfServ_OptRaltWebsite_Handler,
		},
		{
			MethodName: "getRaltWebsite",
			Handler:    _RaltConfServ_GetRaltWebsite_Handler,
		},
		{
			MethodName: "getRaltSpecWebsite",
			Handler:    _RaltConfServ_GetRaltSpecWebsite_Handler,
		},
		{
			MethodName: "getRaltAvailIP",
			Handler:    _RaltConfServ_GetRaltAvailIP_Handler,
		},
		{
			MethodName: "uploadRaltCertPriKey",
			Handler:    _RaltConfServ_UploadRaltCertPriKey_Handler,
		},
		{
			MethodName: "removeRaltCertPriKey",
			Handler:    _RaltConfServ_RemoveRaltCertPriKey_Handler,
		},
		{
			MethodName: "getRaltCertPriKey",
			Handler:    _RaltConfServ_GetRaltCertPriKey_Handler,
		},
		{
			MethodName: "suspendWebsite",
			Handler:    _RaltConfServ_SuspendWebsite_Handler,
		},
		{
			MethodName: "myTest",
			Handler:    _RaltConfServ_MyTest_Handler,
		},
		{
			MethodName: "getRaltGroupWebsite",
			Handler:    _RaltConfServ_GetRaltGroupWebsite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ralt_plugin.proto",
}
